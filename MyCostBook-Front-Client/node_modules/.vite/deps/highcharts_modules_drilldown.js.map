{
  "version": 3,
  "sources": ["../../highcharts/modules/drilldown.src.js"],
  "sourcesContent": ["/**\n * @license Highcharts JS v10.3.3 (2023-01-20)\n *\n * Highcharts Drilldown module\n *\n * Author: Torstein Honsi\n * License: www.highcharts.com/license\n *\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/drilldown', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(\n                    new CustomEvent(\n                        'HighchartsModuleLoaded',\n                        { detail: { path: path, module: obj[path] }\n                    })\n                );\n            }\n        }\n    }\n    _registerModule(_modules, 'Extensions/Breadcrumbs.js', [_modules['Core/Chart/Chart.js'], _modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Core/Utilities.js'], _modules['Core/FormatUtilities.js']], function (Chart, D, H, U, F) {\n        /* *\n         *\n         *  Highcharts Breadcrumbs module\n         *\n         *  Authors: Grzegorz Blachlinski, Karol Kolodziej\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var defaultOptions = D.defaultOptions;\n        var format = F.format;\n        var addEvent = U.addEvent,\n            objectEach = U.objectEach,\n            extend = U.extend,\n            fireEvent = U.fireEvent,\n            merge = U.merge,\n            pick = U.pick,\n            defined = U.defined,\n            isString = U.isString;\n        // Add language support.\n        extend(defaultOptions.lang, \n        /**\n         * @optionparent lang\n         *\n         * @private\n         */\n        {\n            /**\n             * @since 10.0.0\n             * @product  highcharts\n             *\n             * @private\n             */\n            mainBreadcrumb: 'Main'\n        });\n        /**\n         * The Breadcrumbs class\n         *\n         * @private\n         * @class\n         * @name Highcharts.Breadcrumbs\n         *\n         * @param {Highcharts.Chart} chart\n         *        Chart object\n         * @param {Highcharts.Options} userOptions\n         *        User options\n         */\n        var Breadcrumbs = /** @class */ (function () {\n                function Breadcrumbs(chart, userOptions) {\n                    /* *\n                     *\n                     * Properties\n                     *\n                     * */\n                    this.group = void 0;\n                this.list = [];\n                this.elementList = {};\n                this.isDirty = true;\n                this.level = 0;\n                this.options = void 0;\n                var chartOptions = merge(chart.options.drilldown &&\n                        chart.options.drilldown.drillUpButton,\n                    Breadcrumbs.defaultBreadcrumbsOptions,\n                    chart.options.navigation && chart.options.navigation.breadcrumbs,\n                    userOptions);\n                this.chart = chart;\n                this.options = chartOptions || {};\n            }\n            /**\n             * Update Breadcrumbs properties, like level and list.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#updateProperties\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.updateProperties = function (list) {\n                this.setList(list);\n                this.setLevel();\n                this.isDirty = true;\n            };\n            /**\n             * Set breadcrumbs list.\n             * @function Highcharts.Breadcrumbs#setList\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             * @param {Highcharts.BreadcrumbsOptions} list\n             *        Breadcrumbs list.\n             */\n            Breadcrumbs.prototype.setList = function (list) {\n                this.list = list;\n            };\n            /**\n             * Calcule level on which chart currently is.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#setLevel\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.setLevel = function () {\n                this.level = this.list.length && this.list.length - 1;\n            };\n            /**\n             * Get Breadcrumbs level\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#getLevel\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.getLevel = function () {\n                return this.level;\n            };\n            /**\n             * Default button text formatter.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#getButtonText\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             * @param {Highcharts.Breadcrumbs} breadcrumb\n             *        Breadcrumb.\n             * @return {string}\n             *         Formatted text.\n             */\n            Breadcrumbs.prototype.getButtonText = function (breadcrumb) {\n                var breadcrumbs = this,\n                    chart = breadcrumbs.chart,\n                    breadcrumbsOptions = breadcrumbs.options,\n                    lang = chart.options.lang,\n                    textFormat = pick(breadcrumbsOptions.format,\n                    breadcrumbsOptions.showFullPath ?\n                        '{level.name}' : '\u2190 {level.name}'),\n                    defaultText = lang && pick(lang.drillUpText,\n                    lang.mainBreadcrumb);\n                var returnText = breadcrumbsOptions.formatter &&\n                        breadcrumbsOptions.formatter(breadcrumb) ||\n                        format(textFormat, { level: breadcrumb.levelOptions },\n                    chart) || '';\n                if (((isString(returnText) &&\n                    !returnText.length) ||\n                    returnText === '\u2190 ') &&\n                    defined(defaultText)) {\n                    returnText = !breadcrumbsOptions.showFullPath ?\n                        '\u2190 ' + defaultText :\n                        defaultText;\n                }\n                return returnText;\n            };\n            /**\n             * Redraw.\n             *\n             * @requires  modules/breadcrums\n             *\n             * @function Highcharts.Breadcrumbs#redraw\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.redraw = function () {\n                if (this.isDirty) {\n                    this.render();\n                }\n                if (this.group) {\n                    this.group.align();\n                }\n                this.isDirty = false;\n            };\n            /**\n             * Create a group, then draw breadcrumbs together with the separators.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#render\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.render = function () {\n                var breadcrumbs = this,\n                    chart = breadcrumbs.chart,\n                    breadcrumbsOptions = breadcrumbs.options;\n                // A main group for the breadcrumbs.\n                if (!breadcrumbs.group && breadcrumbsOptions) {\n                    breadcrumbs.group = chart.renderer\n                        .g('breadcrumbs-group')\n                        .addClass('highcharts-no-tooltip highcharts-breadcrumbs')\n                        .attr({\n                        zIndex: breadcrumbsOptions.zIndex\n                    })\n                        .add();\n                }\n                // Draw breadcrumbs.\n                if (breadcrumbsOptions.showFullPath) {\n                    this.renderFullPathButtons();\n                }\n                else {\n                    this.renderSingleButton();\n                }\n                this.alignBreadcrumbsGroup();\n            };\n            /**\n             * Draw breadcrumbs together with the separators.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#renderFullPathButtons\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.renderFullPathButtons = function () {\n                // Make sure that only one type of button is visible.\n                this.destroySingleButton();\n                this.resetElementListState();\n                this.updateListElements();\n                this.destroyListElements();\n            };\n            /**\n             * Render Single button - when showFullPath is not used. The button is\n             * similar to the old drillUpButton\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#renderSingleButton\n             * @param {Highcharts.Breadcrumbs} this Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.renderSingleButton = function () {\n                var breadcrumbs = this,\n                    chart = breadcrumbs.chart,\n                    list = breadcrumbs.list,\n                    breadcrumbsOptions = breadcrumbs.options,\n                    buttonSpacing = breadcrumbsOptions.buttonSpacing;\n                // Make sure that only one type of button is visible.\n                this.destroyListElements();\n                // Draw breadcrumbs. Inital position for calculating the breadcrumbs\n                // group.\n                var posX = breadcrumbs.group ?\n                        breadcrumbs.group.getBBox().width :\n                        buttonSpacing,\n                    posY = buttonSpacing;\n                var previousBreadcrumb = list[list.length - 2];\n                if (!chart.drillUpButton && (this.level > 0)) {\n                    chart.drillUpButton = breadcrumbs.renderButton(previousBreadcrumb, posX, posY);\n                }\n                else if (chart.drillUpButton) {\n                    if (this.level > 0) {\n                        // Update button.\n                        this.updateSingleButton();\n                    }\n                    else {\n                        this.destroySingleButton();\n                    }\n                }\n            };\n            /**\n             * Update group position based on align and it's width.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#renderSingleButton\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.alignBreadcrumbsGroup = function (xOffset) {\n                var breadcrumbs = this;\n                if (breadcrumbs.group) {\n                    var breadcrumbsOptions = breadcrumbs.options,\n                        buttonTheme = breadcrumbsOptions.buttonTheme,\n                        positionOptions = breadcrumbsOptions.position,\n                        alignTo = (breadcrumbsOptions.relativeTo === 'chart' ||\n                            breadcrumbsOptions.relativeTo === 'spacingBox' ?\n                            void 0 :\n                            'scrollablePlotBox'),\n                        bBox = breadcrumbs.group.getBBox(),\n                        additionalSpace = 2 * (buttonTheme.padding || 0) +\n                            breadcrumbsOptions.buttonSpacing;\n                    // Store positionOptions\n                    positionOptions.width = bBox.width + additionalSpace;\n                    positionOptions.height = bBox.height + additionalSpace;\n                    var newPositions = merge(positionOptions);\n                    // Add x offset if specified.\n                    if (xOffset) {\n                        newPositions.x += xOffset;\n                    }\n                    if (breadcrumbs.options.rtl) {\n                        newPositions.x += positionOptions.width;\n                    }\n                    newPositions.y = pick(newPositions.y, this.yOffset, 0);\n                    breadcrumbs.group.align(newPositions, true, alignTo);\n                }\n            };\n            /**\n             * Render a button.\n             *\n             * @requires  modules/breadcrums\n             *\n             * @function Highcharts.Breadcrumbs#renderButton\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             * @param {Highcharts.Breadcrumbs} breadcrumb\n             *        Current breadcrumb\n             * @param {Highcharts.Breadcrumbs} posX\n             *        Initial horizontal position\n             * @param {Highcharts.Breadcrumbs} posY\n             *        Initial vertical position\n             * @return {SVGElement|void}\n             *        Returns the SVG button\n             */\n            Breadcrumbs.prototype.renderButton = function (breadcrumb, posX, posY) {\n                var breadcrumbs = this,\n                    chart = this.chart,\n                    breadcrumbsOptions = breadcrumbs.options,\n                    buttonTheme = merge(breadcrumbsOptions.buttonTheme);\n                var button = chart.renderer\n                        .button(breadcrumbs.getButtonText(breadcrumb),\n                    posX,\n                    posY,\n                    function (e) {\n                        // Extract events from button object and call\n                        var buttonEvents = breadcrumbsOptions.events &&\n                            breadcrumbsOptions.events.click;\n                    var callDefaultEvent;\n                    if (buttonEvents) {\n                        callDefaultEvent = buttonEvents.call(breadcrumbs, e, breadcrumb);\n                    }\n                    // (difference in behaviour of showFullPath and drillUp)\n                    if (callDefaultEvent !== false) {\n                        // For single button we are not going to the button\n                        // level, but the one level up\n                        if (!breadcrumbsOptions.showFullPath) {\n                            e.newLevel = breadcrumbs.level - 1;\n                        }\n                        else {\n                            e.newLevel = breadcrumb.level;\n                        }\n                        fireEvent(breadcrumbs, 'up', e);\n                    }\n                }, buttonTheme)\n                    .addClass('highcharts-breadcrumbs-button')\n                    .add(breadcrumbs.group);\n                if (!chart.styledMode) {\n                    button.attr(breadcrumbsOptions.style);\n                }\n                return button;\n            };\n            /**\n             * Render a separator.\n             *\n             * @requires  modules/breadcrums\n             *\n             * @function Highcharts.Breadcrumbs#renderSeparator\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             * @param {Highcharts.Breadcrumbs} posX\n             *        Initial horizontal position\n             * @param {Highcharts.Breadcrumbs} posY\n             *        Initial vertical position\n             * @return {Highcharts.SVGElement}\n             *        Returns the SVG button\n             */\n            Breadcrumbs.prototype.renderSeparator = function (posX, posY) {\n                var breadcrumbs = this,\n                    chart = this.chart,\n                    breadcrumbsOptions = breadcrumbs.options,\n                    separatorOptions = breadcrumbsOptions.separator;\n                var separator = chart.renderer\n                        .label(separatorOptions.text,\n                    posX,\n                    posY,\n                    void 0,\n                    void 0,\n                    void 0,\n                    false)\n                        .addClass('highcharts-breadcrumbs-separator')\n                        .add(breadcrumbs.group);\n                if (!chart.styledMode) {\n                    separator.css(separatorOptions.style);\n                }\n                return separator;\n            };\n            /**\n             * Update.\n             * @function Highcharts.Breadcrumbs#update\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             * @param {Highcharts.BreadcrumbsOptions} options\n             *        Breadcrumbs class.\n             * @param {boolean} redraw\n             *        Redraw flag\n             */\n            Breadcrumbs.prototype.update = function (options) {\n                merge(true, this.options, options);\n                this.destroy();\n                this.isDirty = true;\n            };\n            /**\n             * Update button text when the showFullPath set to false.\n             * @function Highcharts.Breadcrumbs#updateSingleButton\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.updateSingleButton = function () {\n                var chart = this.chart,\n                    currentBreadcrumb = this.list[this.level - 1];\n                if (chart.drillUpButton) {\n                    chart.drillUpButton.attr({\n                        text: this.getButtonText(currentBreadcrumb)\n                    });\n                }\n            };\n            /**\n             * Destroy the chosen breadcrumbs group\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#destroy\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.destroy = function () {\n                this.destroySingleButton();\n                // Destroy elements one by one. It's necessary beacause\n                // g().destroy() does not remove added HTML\n                this.destroyListElements(true);\n                // Then, destroy the group itself.\n                if (this.group) {\n                    this.group.destroy();\n                }\n                this.group = void 0;\n            };\n            /**\n             * Destroy the elements' buttons and separators.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#destroyListElements\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.destroyListElements = function (force) {\n                var elementList = this.elementList;\n                objectEach(elementList, function (element, level) {\n                    if (force ||\n                        !elementList[level].updated) {\n                        element = elementList[level];\n                        element.button && element.button.destroy();\n                        element.separator && element.separator.destroy();\n                        delete element.button;\n                        delete element.separator;\n                        delete elementList[level];\n                    }\n                });\n                if (force) {\n                    this.elementList = {};\n                }\n            };\n            /**\n             * Destroy the single button if exists.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#destroySingleButton\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.destroySingleButton = function () {\n                if (this.chart.drillUpButton) {\n                    this.chart.drillUpButton.destroy();\n                    this.chart.drillUpButton = void 0;\n                }\n            };\n            /**\n             * Reset state for all buttons in elementList.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#resetElementListState\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.resetElementListState = function () {\n                objectEach(this.elementList, function (element) {\n                    element.updated = false;\n                });\n            };\n            /**\n             * Update rendered elements inside the elementList.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#updateListElements\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.updateListElements = function () {\n                var breadcrumbs = this,\n                    elementList = breadcrumbs.elementList,\n                    buttonSpacing = breadcrumbs.options.buttonSpacing,\n                    list = breadcrumbs.list,\n                    rtl = breadcrumbs.options.rtl,\n                    rtlFactor = rtl ? -1 : 1,\n                    updateXPosition = function (element,\n                    spacing) {\n                        return rtlFactor * element.getBBox().width +\n                            rtlFactor * spacing;\n                }, adjustToRTL = function (element, posX, posY) {\n                    element.translate(posX - element.getBBox().width, posY);\n                };\n                // Inital position for calculating the breadcrumbs group.\n                var posX = breadcrumbs.group ?\n                        updateXPosition(breadcrumbs.group,\n                    buttonSpacing) :\n                        buttonSpacing,\n                    posY = buttonSpacing,\n                    currentBreadcrumb;\n                list.forEach(function (breadcrumb, index) {\n                    var isLast = index === list.length - 1;\n                    var button,\n                        separator;\n                    if (elementList[breadcrumb.level]) {\n                        currentBreadcrumb = elementList[breadcrumb.level];\n                        button = currentBreadcrumb.button;\n                        // Render a separator if it was not created before.\n                        if (!currentBreadcrumb.separator &&\n                            !isLast) {\n                            // Add spacing for the next separator\n                            posX += rtlFactor * buttonSpacing;\n                            currentBreadcrumb.separator =\n                                breadcrumbs.renderSeparator(posX, posY);\n                            if (rtl) {\n                                adjustToRTL(currentBreadcrumb.separator, posX, posY);\n                            }\n                            posX += updateXPosition(currentBreadcrumb.separator, buttonSpacing);\n                        }\n                        else if (currentBreadcrumb.separator &&\n                            isLast) {\n                            currentBreadcrumb.separator.destroy();\n                            delete currentBreadcrumb.separator;\n                        }\n                        elementList[breadcrumb.level].updated = true;\n                    }\n                    else {\n                        // Render a button.\n                        button = breadcrumbs.renderButton(breadcrumb, posX, posY);\n                        if (rtl) {\n                            adjustToRTL(button, posX, posY);\n                        }\n                        posX += updateXPosition(button, buttonSpacing);\n                        // Render a separator.\n                        if (!isLast) {\n                            separator = breadcrumbs.renderSeparator(posX, posY);\n                            if (rtl) {\n                                adjustToRTL(separator, posX, posY);\n                            }\n                            posX += updateXPosition(separator, buttonSpacing);\n                        }\n                        elementList[breadcrumb.level] = {\n                            button: button,\n                            separator: separator,\n                            updated: true\n                        };\n                    }\n                    if (button) {\n                        button.setState(isLast ? 2 : 0);\n                    }\n                });\n            };\n            /**\n             * Options for breadcrumbs. Breadcrumbs general options are defined in\n             * `navigation.breadcrumbs`. Specific options for drilldown are set in\n             * `drilldown.breadcrumbs` and for tree-like series traversing, in\n             * `plotOptions[series].breadcrumbs`.\n             *\n             * @since 10.0.0\n             * @product highcharts\n             * @optionparent navigation.breadcrumbs\n             */\n            Breadcrumbs.defaultBreadcrumbsOptions = {\n                /**\n                 * A collection of attributes for the buttons. The object takes SVG\n                 * attributes like `fill`, `stroke`, `stroke-width`, as well as `style`,\n                 * a collection of CSS properties for the text.\n                 *\n                 * The object can also be extended with states, so you can set\n                 * presentational options for `hover`, `select` or `disabled` button\n                 * states.\n                 *\n                 * @sample {highcharts} highcharts/breadcrumbs/single-button\n                 *         Themed, single button\n                 *\n                 * @type       {Highcharts.SVGAttributes}\n                 * @since 10.0.0\n                 * @product    highcharts\n                 */\n                buttonTheme: {\n                    /** @ignore */\n                    fill: 'none',\n                    /** @ignore */\n                    height: 18,\n                    /** @ignore */\n                    padding: 2,\n                    /** @ignore */\n                    'stroke-width': 0,\n                    /** @ignore */\n                    zIndex: 7,\n                    /** @ignore */\n                    states: {\n                        select: {\n                            fill: 'none'\n                        }\n                    },\n                    style: {\n                        color: \"#335cad\" /* Palette.highlightColor80 */\n                    }\n                },\n                /**\n                 * The default padding for each button and separator in each direction.\n                 *\n                 * @type      {number}\n                 * @since 10.0.0\n                 */\n                buttonSpacing: 5,\n                /**\n                 * Fires when clicking on the breadcrumbs button. Two arguments are\n                 * passed to the function. First breadcrumb button as an SVG element.\n                 * Second is the breadcrumbs class, containing reference to the chart,\n                 * series etc.\n                 *\n                 * ```js\n                 * click: function(button, breadcrumbs) {\n                 *   console.log(button);\n                 * }\n                 * ```\n                 *\n                 * Return false to stop default buttons click action.\n                 *\n                 * @type      {Highcharts.BreadcrumbsClickCallbackFunction}\n                 * @since 10.0.0\n                 * @apioption navigation.breadcrumbs.events.click\n                 */\n                /**\n                 * When the breadcrumbs are floating, the plot area will not move to\n                 * make space for it. By default, the chart will not make space for the\n                 * buttons. This property won't work when positioned in the middle.\n                 *\n                 * @sample highcharts/breadcrumbs/single-button\n                 *         Floating button\n                 * @type      {boolean}\n                 * @since 10.0.0\n                 */\n                floating: false,\n                /**\n                 * A format string for the breadcrumbs button. Variables are enclosed by\n                 * curly brackets. Available values are passed in the declared point\n                 * options.\n                 *\n                 * @type      {string|undefined}\n                 * @since 10.0.0\n                 * @default   undefined\n                 * @sample {highcharts} highcharts/breadcrumbs/format Display custom\n                 *          values in breadcrumb button.\n                 */\n                format: void 0,\n                /**\n                 * Callback function to format the breadcrumb text from scratch.\n                 *\n                 * @type      {Highcharts.BreadcrumbsFormatterCallbackFunction}\n                 * @since 10.0.0\n                 * @default   undefined\n                 * @apioption navigation.breadcrumbs.formatter\n                 */\n                /**\n                 * What box to align the button to. Can be either `plotBox` or\n                 * `spacingBox`.\n                 *\n                 * @type       {Highcharts.ButtonRelativeToValue}\n                 * @default    plotBox\n                 * @since 10.0.0\n                 * @product    highcharts highmaps\n                 */\n                relativeTo: 'plotBox',\n                /**\n                 * Whether to reverse the order of buttons. This is common in Arabic\n                 * and Hebrew.\n                 *\n                 * @type       {boolean}\n                 * @since 10.2.0\n                 * @sample     {highcharts} highcharts/breadcrumbs/rtl\n                 *             Breadcrumbs in RTL\n                 */\n                rtl: false,\n                /**\n                 * Positioning for the button row. The breadcrumbs buttons will be\n                 * aligned properly for the default chart layout (title,  subtitle,\n                 * legend, range selector) for the custom chart layout set the position\n                 * properties.\n                 * @type       {Highcharts.BreadcrumbsAlignOptions}\n                 * @since 10.0.0\n                 * @product    highcharts highmaps\n                 * @sample     {highcharts} highcharts/breadcrumbs/single-button\n                 *             Single, right aligned button\n                 */\n                position: {\n                    /**\n                     * Horizontal alignment of the breadcrumbs buttons.\n                     *\n                     * @type {Highcharts.AlignValue}\n                     */\n                    align: 'left',\n                    /**\n                     * Vertical alignment of the breadcrumbs buttons.\n                     *\n                     * @type {Highcharts.VerticalAlignValue}\n                     */\n                    verticalAlign: 'top',\n                    /**\n                     * The X offset of the breadcrumbs button group.\n                     *\n                     * @type {number}\n                     */\n                    x: 0,\n                    /**\n                     * The Y offset of the breadcrumbs button group. When `undefined`,\n                     * and `floating` is `false`, the `y` position is adapted so that\n                     * the breadcrumbs are rendered outside the target area.\n                     *\n                     * @type {number|undefined}\n                     */\n                    y: void 0\n                },\n                /**\n                 * Options object for Breadcrumbs separator.\n                 *\n                 * @since 10.0.0\n                 */\n                separator: {\n                    /**\n                     * @type {string}\n                     * @since 10.0.0\n                     * @product highcharts\n                     */\n                    text: '/',\n                    /**\n                     * CSS styles for the breadcrumbs separator.\n                     *\n                     * In styled mode, the breadcrumbs separators are styled by the\n                     * `.highcharts-separator` rule with its different states.\n                     *  @type {Highcharts.CSSObject}\n                     *  @since 10.0.0\n                     */\n                    style: {\n                        color: \"#666666\" /* Palette.neutralColor60 */\n                    }\n                },\n                /**\n                 * Show full path or only a single button.\n                 *\n                 * @type      {boolean}\n                 * @since 10.0.0\n                 * @sample {highcharts} highcharts/breadcrumbs/single-button\n                 *          Single, styled button\n                 */\n                showFullPath: true,\n                /**\n                 * CSS styles for all breadcrumbs.\n                 *\n                 * In styled mode, the breadcrumbs buttons are styled by the\n                 * `.highcharts-breadcrumbs-buttons .highcharts-button` rule with its\n                 * different states.\n                 *  @type {Highcharts.SVGAttributes}\n                 *  @since 10.0.0\n                 */\n                style: {},\n                /**\n                 * Whether to use HTML to render the breadcrumbs items texts.\n                 *\n                 * @type      {boolean}\n                 * @since 10.0.0\n                 */\n                useHTML: false,\n                /**\n                 * The z index of the breadcrumbs group.\n                 *\n                 * @type      {number}\n                 * @since 10.0.0\n                 */\n                zIndex: 7\n            };\n            return Breadcrumbs;\n        }());\n        /* eslint-disable no-invalid-this */\n        if (!H.Breadcrumbs) {\n            H.Breadcrumbs = Breadcrumbs;\n            // Logic for making space for the buttons above the plot area\n            addEvent(Chart, 'getMargins', function () {\n                var breadcrumbs = this.breadcrumbs;\n                if (breadcrumbs &&\n                    !breadcrumbs.options.floating &&\n                    breadcrumbs.level) {\n                    var breadcrumbsOptions = breadcrumbs.options,\n                        buttonTheme = breadcrumbsOptions.buttonTheme,\n                        breadcrumbsHeight = ((buttonTheme.height || 0) +\n                            2 * (buttonTheme.padding || 0) +\n                            breadcrumbsOptions.buttonSpacing),\n                        verticalAlign = breadcrumbsOptions.position.verticalAlign;\n                    if (verticalAlign === 'bottom') {\n                        this.marginBottom = (this.marginBottom || 0) + breadcrumbsHeight;\n                        breadcrumbs.yOffset = breadcrumbsHeight;\n                    }\n                    else if (verticalAlign !== 'middle') {\n                        this.plotTop += breadcrumbsHeight;\n                        breadcrumbs.yOffset = -breadcrumbsHeight;\n                    }\n                    else {\n                        breadcrumbs.yOffset = void 0;\n                    }\n                }\n            });\n            addEvent(Chart, 'redraw', function () {\n                this.breadcrumbs && this.breadcrumbs.redraw();\n            });\n            // Remove resize/afterSetExtremes at chart destroy\n            addEvent(Chart, 'destroy', function destroyEvents() {\n                if (this.breadcrumbs) {\n                    this.breadcrumbs.destroy();\n                    this.breadcrumbs = void 0;\n                }\n            });\n            // Shift the drillUpButton to make the space for resetZoomButton, #8095.\n            addEvent(Chart, 'afterShowResetZoom', function () {\n                var chart = this;\n                if (chart.breadcrumbs) {\n                    var bbox = chart.resetZoomButton &&\n                            chart.resetZoomButton.getBBox(),\n                        breadcrumbsOptions = chart.breadcrumbs.options;\n                    if (bbox &&\n                        breadcrumbsOptions.position.align === 'right' &&\n                        breadcrumbsOptions.relativeTo === 'plotBox') {\n                        chart.breadcrumbs.alignBreadcrumbsGroup(-bbox.width - breadcrumbsOptions.buttonSpacing);\n                    }\n                }\n            });\n            // After zooming out, shift the drillUpButton\n            // to the previous position, #8095.\n            addEvent(Chart, 'selection', function (event) {\n                if (event.resetSelection === true &&\n                    this.breadcrumbs) {\n                    this.breadcrumbs.alignBreadcrumbsGroup();\n                }\n            });\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * Callback function to react on button clicks.\n         *\n         * @callback Highcharts.BreadcrumbsClickCallbackFunction\n         *\n         * @param {Highcharts.Event} event\n         * Event.\n         *\n         * @param {Highcharts.BreadcrumbOptions} options\n         * Breadcrumb options.\n         *\n         * @param {global.Event} e\n         * Event arguments.\n         */\n        /**\n         * Callback function to format the breadcrumb text from scratch.\n         *\n         * @callback Highcharts.BreadcrumbsFormatterCallbackFunction\n         *\n         * @param {Highcharts.Event} event\n         * Event.\n         *\n         * @param {Highcharts.BreadcrumbOptions} options\n         * Breadcrumb options.\n         *\n         * @return {string}\n         * Formatted text or false\n         */\n        /**\n         * Options for the one breadcrumb.\n         *\n         * @interface Highcharts.BreadcrumbOptions\n         */\n        /**\n         * Level connected to a specific breadcrumb.\n         * @name Highcharts.BreadcrumbOptions#level\n         * @type {number}\n         */\n        /**\n         * Options for series or point connected to a specific breadcrumb.\n         * @name Highcharts.BreadcrumbOptions#levelOptions\n         * @type {SeriesOptions|PointOptionsObject}\n         */\n        /**\n         * Options for aligning breadcrumbs group.\n         *\n         * @interface Highcharts.BreadcrumbsAlignOptions\n         */\n        /**\n         * Align of a Breadcrumb group.\n         * @default right\n         * @name Highcharts.BreadcrumbsAlignOptions#align\n         * @type {AlignValue}\n         */\n        /**\n         * Vertical align of a Breadcrumb group.\n         * @default top\n         * @name Highcharts.BreadcrumbsAlignOptions#verticalAlign\n         * @type {VerticalAlignValue}\n         */\n        /**\n         * X offset of a Breadcrumbs group.\n         * @name Highcharts.BreadcrumbsAlignOptions#x\n         * @type {number}\n         */\n        /**\n         * Y offset of a Breadcrumbs group.\n         * @name Highcharts.BreadcrumbsAlignOptions#y\n         * @type {number}\n         */\n        /**\n         * Options for all breadcrumbs.\n         *\n         * @interface Highcharts.BreadcrumbsOptions\n         */\n        /**\n         * Button theme.\n         * @name Highcharts.BreadcrumbsOptions#buttonTheme\n         * @type { SVGAttributes | undefined }\n         */\n        (''); // Keeps doclets above in JS file\n\n        return Breadcrumbs;\n    });\n    _registerModule(_modules, 'Extensions/Drilldown.js', [_modules['Core/Animation/AnimationUtilities.js'], _modules['Core/Axis/Axis.js'], _modules['Core/Chart/Chart.js'], _modules['Core/Color/Color.js'], _modules['Series/Column/ColumnSeries.js'], _modules['Core/Globals.js'], _modules['Core/Defaults.js'], _modules['Core/Series/Point.js'], _modules['Core/Series/Series.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Renderer/SVG/SVGRenderer.js'], _modules['Core/Axis/Tick.js'], _modules['Core/Utilities.js'], _modules['Extensions/Breadcrumbs.js']], function (A, Axis, Chart, Color, ColumnSeries, H, D, Point, Series, SeriesRegistry, SVGRenderer, Tick, U, Breadcrumbs) {\n        /* *\n         *\n         *  Highcharts Drilldown module\n         *\n         *  Author: Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var animObject = A.animObject;\n        var noop = H.noop;\n        var defaultOptions = D.defaultOptions;\n        var seriesTypes = SeriesRegistry.seriesTypes;\n        var addEvent = U.addEvent,\n            removeEvent = U.removeEvent,\n            extend = U.extend,\n            fireEvent = U.fireEvent,\n            merge = U.merge,\n            objectEach = U.objectEach,\n            pick = U.pick,\n            syncTimeout = U.syncTimeout;\n        /**\n         * Gets fired when a drilldown point is clicked, before the new series is added.\n         * Note that when clicking a category label to trigger multiple series\n         * drilldown, one `drilldown` event is triggered per point in the category.\n         *\n         * @callback Highcharts.DrilldownCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart where the event occurs.\n         *\n         * @param {Highcharts.DrilldownEventObject} e\n         *        The drilldown event.\n         */\n        /**\n         * The event arguments when a drilldown point is clicked.\n         *\n         * @interface Highcharts.DrilldownEventObject\n         */ /**\n        * If a category label was clicked, which index.\n        * @name Highcharts.DrilldownEventObject#category\n        * @type {number|undefined}\n        */ /**\n        * The original browser event (usually click) that triggered the drilldown.\n        * @name Highcharts.DrilldownEventObject#originalEvent\n        * @type {global.Event|undefined}\n        */ /**\n        * Prevents the default behaviour of the event.\n        * @name Highcharts.DrilldownEventObject#preventDefault\n        * @type {Function}\n        */ /**\n        * The originating point.\n        * @name Highcharts.DrilldownEventObject#point\n        * @type {Highcharts.Point}\n        */ /**\n        * If a category label was clicked, this array holds all points corresponding to\n        * the category. Otherwise it is set to false.\n        * @name Highcharts.DrilldownEventObject#points\n        * @type {boolean|Array<Highcharts.Point>|undefined}\n        */ /**\n        * Options for the new series. If the event is utilized for async drilldown, the\n        * seriesOptions are not added, but rather loaded async.\n        * @name Highcharts.DrilldownEventObject#seriesOptions\n        * @type {Highcharts.SeriesOptionsType|undefined}\n        */ /**\n        * The event target.\n        * @name Highcharts.DrilldownEventObject#target\n        * @type {Highcharts.Chart}\n        */ /**\n        * The event type.\n        * @name Highcharts.DrilldownEventObject#type\n        * @type {\"drilldown\"}\n        */\n        /**\n         * This gets fired after all the series have been drilled up. This is especially\n         * usefull in a chart with multiple drilldown series.\n         *\n         * @callback Highcharts.DrillupAllCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart where the event occurs.\n         *\n         * @param {Highcharts.DrillupAllEventObject} e\n         *        The final drillup event.\n         */\n        /**\n         * The event arguments when all the series have been drilled up.\n         *\n         * @interface Highcharts.DrillupAllEventObject\n         */ /**\n        * Prevents the default behaviour of the event.\n        * @name Highcharts.DrillupAllEventObject#preventDefault\n        * @type {Function}\n        */ /**\n        * The event target.\n        * @name Highcharts.DrillupAllEventObject#target\n        * @type {Highcharts.Chart}\n        */ /**\n        * The event type.\n        * @name Highcharts.DrillupAllEventObject#type\n        * @type {\"drillupall\"}\n        */\n        /**\n         * Gets fired when drilling up from a drilldown series.\n         *\n         * @callback Highcharts.DrillupCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart where the event occurs.\n         *\n         * @param {Highcharts.DrillupEventObject} e\n         *        The drillup event.\n         */\n        /**\n         * The event arguments when drilling up from a drilldown series.\n         *\n         * @interface Highcharts.DrillupEventObject\n         */ /**\n        * Prevents the default behaviour of the event.\n        * @name Highcharts.DrillupEventObject#preventDefault\n        * @type {Function}\n        */ /**\n        * Options for the new series.\n        * @name Highcharts.DrillupEventObject#seriesOptions\n        * @type {Highcharts.SeriesOptionsType|undefined}\n        */ /**\n        * The event target.\n        * @name Highcharts.DrillupEventObject#target\n        * @type {Highcharts.Chart}\n        */ /**\n        * The event type.\n        * @name Highcharts.DrillupEventObject#type\n        * @type {\"drillup\"}\n        */\n        var PieSeries = seriesTypes.pie,\n            ddSeriesId = 1;\n        // Add language\n        extend(defaultOptions.lang, \n        /**\n         * @optionparent lang\n         */\n        {\n        /**\n         * The text for the button that appears when drilling down, linking back\n         * to the parent series. The parent series' name is inserted for\n         * `{series.name}`.\n         *\n         * @deprecated\n         * @since    3.0.8\n         * @product  highcharts highmaps\n         * @requires modules/drilldown\n         * @apioption lang.drillUpText\n         */\n        });\n        /**\n         * Options for drill down, the concept of inspecting increasingly high\n         * resolution data through clicking on chart items like columns or pie slices.\n         *\n         * The drilldown feature requires the drilldown.js file to be loaded,\n         * found in the modules directory of the download package, or online at\n         * [code.highcharts.com/modules/drilldown.js\n         * ](https://code.highcharts.com/modules/drilldown.js).\n         *\n         * @sample {highcharts} highcharts/series-organization/drilldown\n         *         Organization chart drilldown\n         *\n         * @product      highcharts highmaps\n         * @requires     modules/drilldown\n         * @optionparent drilldown\n         */\n        defaultOptions.drilldown = {\n            /**\n             * When this option is false, clicking a single point will drill down\n             * all points in the same category, equivalent to clicking the X axis\n             * label.\n             *\n             * @sample {highcharts} highcharts/drilldown/allowpointdrilldown-false/\n             *         Don't allow point drilldown\n             *\n             * @type      {boolean}\n             * @default   true\n             * @since     4.1.7\n             * @product   highcharts\n             * @apioption drilldown.allowPointDrilldown\n             */\n            /**\n             * Options for the breadcrumbs, the navigation at the top leading the way\n             * up through the drilldown levels.\n             *\n             * @since 10.0.0\n             * @product   highcharts\n             * @extends   navigation.breadcrumbs\n             * @optionparent drilldown.breadcrumbs\n             */\n            /**\n             * An array of series configurations for the drill down. Each series\n             * configuration uses the same syntax as the [series](#series) option set.\n             * These drilldown series are hidden by default. The drilldown series is\n             * linked to the parent series' point by its `id`.\n             *\n             * @type      {Array<Highcharts.SeriesOptionsType>}\n             * @since     3.0.8\n             * @product   highcharts highmaps\n             * @apioption drilldown.series\n             */\n            /**\n             * Additional styles to apply to the X axis label for a point that\n             * has drilldown data. By default it is underlined and blue to invite\n             * to interaction.\n             *\n             * In styled mode, active label styles can be set with the\n             * `.highcharts-drilldown-axis-label` class.\n             *\n             * @sample {highcharts} highcharts/drilldown/labels/\n             *         Label styles\n             *\n             * @type    {Highcharts.CSSObject}\n             * @default { \"cursor\": \"pointer\", \"color\": \"#003399\", \"fontWeight\": \"bold\", \"textDecoration\": \"underline\" }\n             * @since   3.0.8\n             * @product highcharts highmaps\n             */\n            activeAxisLabelStyle: {\n                /** @ignore-option */\n                cursor: 'pointer',\n                /** @ignore-option */\n                color: \"#003399\" /* Palette.highlightColor100 */,\n                /** @ignore-option */\n                fontWeight: 'bold',\n                /** @ignore-option */\n                textDecoration: 'underline'\n            },\n            /**\n             * Additional styles to apply to the data label of a point that has\n             * drilldown data. By default it is underlined and blue to invite to\n             * interaction.\n             *\n             * In styled mode, active data label styles can be applied with the\n             * `.highcharts-drilldown-data-label` class.\n             *\n             * @sample {highcharts} highcharts/drilldown/labels/\n             *         Label styles\n             *\n             * @type    {Highcharts.CSSObject}\n             * @default { \"cursor\": \"pointer\", \"color\": \"#003399\", \"fontWeight\": \"bold\", \"textDecoration\": \"underline\" }\n             * @since   3.0.8\n             * @product highcharts highmaps\n             */\n            activeDataLabelStyle: {\n                cursor: 'pointer',\n                color: \"#003399\" /* Palette.highlightColor100 */,\n                fontWeight: 'bold',\n                textDecoration: 'underline'\n            },\n            /**\n             * Set the animation for all drilldown animations. Animation of a drilldown\n             * occurs when drilling between a column point and a column series,\n             * or a pie slice and a full pie series. Drilldown can still be used\n             * between series and points of different types, but animation will\n             * not occur.\n             *\n             * The animation can either be set as a boolean or a configuration\n             * object. If `true`, it will use the 'swing' jQuery easing and a duration\n             * of 500 ms. If used as a configuration object, the following properties\n             * are supported:\n             *\n             * - `duration`: The duration of the animation in milliseconds.\n             *\n             * - `easing`: A string reference to an easing function set on the `Math`\n             *   object. See\n             *   [the easing demo](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/).\n             *\n             * @type    {boolean|Highcharts.AnimationOptionsObject}\n             * @since   3.0.8\n             * @product highcharts highmaps\n             */\n            animation: {\n                /** @ignore-option */\n                duration: 500\n            },\n            /**\n             *\n             * Options for the drill up button that appears when drilling down on a\n             * series. The text for the button is defined in\n             * [lang.drillUpText](#lang.drillUpText).\n             *\n             * This option is deprecated since 9.3.2, use `drilldown.breadcrumbs`\n             * instead.\n             *\n             * @sample highcharts/breadcrumbs/single-button\n             *         Breadcrumbs set up like a legacy button\n             * @sample {highcharts} highcharts/drilldown/drillupbutton/ Drill up button\n             * @sample {highmaps} highcharts/drilldown/drillupbutton/ Drill up button\n             *\n             * @since   3.0.8\n             * @product highcharts highmaps\n             *\n             * @deprecated\n             */\n            drillUpButton: {\n                /**\n                 * What box to align the button to. Can be either `plotBox` or\n                 * `spacingBox`.\n                 *\n                 * @type       {Highcharts.ButtonRelativeToValue}\n                 * @default    plotBox\n                 * @since      3.0.8\n                 * @product    highcharts highmaps\n                 * @apioption  drilldown.drillUpButton.relativeTo\n                 */\n                /**\n                 * A collection of attributes for the button. The object takes SVG\n                 * attributes like `fill`, `stroke`, `stroke-width` or `r`, the border\n                 * radius. The theme also supports `style`, a collection of CSS\n                 * properties for the text. Equivalent attributes for the hover state\n                 * are given in `theme.states.hover`.\n                 *\n                 * In styled mode, drill-up button styles can be applied with the\n                 * `.highcharts-drillup-button` class.\n                 *\n                 * @sample {highcharts} highcharts/drilldown/drillupbutton/\n                 *         Button theming\n                 * @sample {highmaps} highcharts/drilldown/drillupbutton/\n                 *         Button theming\n                 *\n                 * @type      {Object}\n                 * @since     3.0.8\n                 * @product   highcharts highmaps\n                 * @apioption drilldown.drillUpButton.theme\n                 */\n                /**\n                 * Positioning options for the button within the `relativeTo` box.\n                 * Available properties are `x`, `y`, `align` and `verticalAlign`.\n                 *\n                 * @type    {Highcharts.AlignObject}\n                 * @since   3.0.8\n                 * @product highcharts highmaps\n                 */\n                position: {\n                    /**\n                     * Vertical alignment of the button.\n                     *\n                     * @type      {Highcharts.VerticalAlignValue}\n                     * @default   top\n                     * @product   highcharts highmaps\n                     * @apioption drilldown.drillUpButton.position.verticalAlign\n                     */\n                    /**\n                     * Horizontal alignment.\n                     *\n                     * @type {Highcharts.AlignValue}\n                     */\n                    align: 'right',\n                    /**\n                     * The X offset of the button.\n                     */\n                    x: -10,\n                    /**\n                     * The Y offset of the button.\n                     */\n                    y: 10\n                }\n            }\n        };\n        /**\n         * Fires when a drilldown point is clicked, before the new series is added. This\n         * event is also utilized for async drilldown, where the seriesOptions are not\n         * added by option, but rather loaded async. Note that when clicking a category\n         * label to trigger multiple series drilldown, one `drilldown` event is\n         * triggered per point in the category.\n         *\n         * Event arguments:\n         *\n         * - `category`: If a category label was clicked, which index.\n         *\n         * - `originalEvent`: The original browser event (usually click) that triggered\n         *   the drilldown.\n         *\n         * - `point`: The originating point.\n         *\n         * - `points`: If a category label was clicked, this array holds all points\n         *   corresponding to the category.\n         *\n         * - `seriesOptions`: Options for the new series.\n         *\n         * @sample {highcharts} highcharts/drilldown/async/\n         *         Async drilldown\n         *\n         * @type      {Highcharts.DrilldownCallbackFunction}\n         * @since     3.0.8\n         * @product   highcharts highmaps\n         * @context   Highcharts.Chart\n         * @requires  modules/drilldown\n         * @apioption chart.events.drilldown\n         */\n        /**\n         * Fires when drilling up from a drilldown series.\n         *\n         * @type      {Highcharts.DrillupCallbackFunction}\n         * @since     3.0.8\n         * @product   highcharts highmaps\n         * @context   Highcharts.Chart\n         * @requires  modules/drilldown\n         * @apioption chart.events.drillup\n         */\n        /**\n         * In a chart with multiple drilldown series, this event fires after all the\n         * series have been drilled up.\n         *\n         * @type      {Highcharts.DrillupAllCallbackFunction}\n         * @since     4.2.4\n         * @product   highcharts highmaps\n         * @context   Highcharts.Chart\n         * @requires  modules/drilldown\n         * @apioption chart.events.drillupall\n         */\n        /**\n         * The `id` of a series in the [drilldown.series](#drilldown.series) array to\n         * use for a drilldown for this point.\n         *\n         * @sample {highcharts} highcharts/drilldown/basic/\n         *         Basic drilldown\n         *\n         * @type      {string}\n         * @since     3.0.8\n         * @product   highcharts\n         * @requires  modules/drilldown\n         * @apioption series.line.data.drilldown\n         */\n        /**\n         * A general fadeIn method.\n         *\n         * @requires module:modules/drilldown\n         *\n         * @function Highcharts.SVGElement#fadeIn\n         *\n         * @param {boolean|Partial<Highcharts.AnimationOptionsObject>} [animation]\n         * The animation options for the element fade.\n         */\n        SVGRenderer.prototype.Element.prototype.fadeIn = function (animation) {\n            this\n                .attr({\n                opacity: 0.1,\n                visibility: 'inherit'\n            })\n                .animate({\n                opacity: pick(this.newOpacity, 1) // newOpacity used in maps\n            }, animation || {\n                duration: 250\n            });\n        };\n        /**\n         * Add a series to the chart as drilldown from a specific point in the parent\n         * series. This method is used for async drilldown, when clicking a point in a\n         * series should result in loading and displaying a more high-resolution series.\n         * When not async, the setup is simpler using the\n         * [drilldown.series](https://api.highcharts.com/highcharts/drilldown.series)\n         * options structure.\n         *\n         * @sample highcharts/drilldown/async/\n         *         Async drilldown\n         *\n         * @function Highcharts.Chart#addSeriesAsDrilldown\n         *\n         * @param {Highcharts.Point} point\n         * The point from which the drilldown will start.\n         *\n         * @param {Highcharts.SeriesOptionsType} options\n         * The series options for the new, detailed series.\n         */\n        Chart.prototype.addSeriesAsDrilldown = function (point, options) {\n            this.addSingleSeriesAsDrilldown(point, options);\n            this.applyDrilldown();\n        };\n        Chart.prototype.addSingleSeriesAsDrilldown = function (point, ddOptions) {\n            var oldSeries = point.series,\n                xAxis = oldSeries.xAxis,\n                yAxis = oldSeries.yAxis,\n                newSeries,\n                pointIndex,\n                levelSeries = [],\n                levelSeriesOptions = [],\n                level,\n                levelNumber,\n                last,\n                colorProp;\n            colorProp = this.styledMode ?\n                { colorIndex: pick(point.colorIndex, oldSeries.colorIndex) } :\n                { color: point.color || oldSeries.color };\n            if (!this.drilldownLevels) {\n                this.drilldownLevels = [];\n            }\n            levelNumber = oldSeries.options._levelNumber || 0;\n            // See if we can reuse the registered series from last run\n            last = this.drilldownLevels[this.drilldownLevels.length - 1];\n            if (last && last.levelNumber !== levelNumber) {\n                last = void 0;\n            }\n            ddOptions = extend(extend({\n                _ddSeriesId: ddSeriesId++\n            }, colorProp), ddOptions);\n            pointIndex = oldSeries.points.indexOf(point);\n            // Record options for all current series\n            oldSeries.chart.series.forEach(function (series) {\n                if (series.xAxis === xAxis && !series.isDrilling) {\n                    series.options._ddSeriesId =\n                        series.options._ddSeriesId || ddSeriesId++;\n                    series.options._colorIndex = series.userOptions._colorIndex;\n                    series.options._levelNumber =\n                        series.options._levelNumber || levelNumber; // #3182\n                    if (last) {\n                        levelSeries = last.levelSeries;\n                        levelSeriesOptions = last.levelSeriesOptions;\n                    }\n                    else {\n                        levelSeries.push(series);\n                        // (#10597)\n                        series.purgedOptions = merge({\n                            _ddSeriesId: series.options._ddSeriesId,\n                            _levelNumber: series.options._levelNumber,\n                            selected: series.options.selected\n                        }, series.userOptions);\n                        levelSeriesOptions.push(series.purgedOptions);\n                    }\n                }\n            });\n            // Add a record of properties for each drilldown level\n            level = extend({\n                levelNumber: levelNumber,\n                seriesOptions: oldSeries.options,\n                seriesPurgedOptions: oldSeries.purgedOptions,\n                levelSeriesOptions: levelSeriesOptions,\n                levelSeries: levelSeries,\n                shapeArgs: point.shapeArgs,\n                // no graphic in line series with markers disabled\n                bBox: point.graphic ? point.graphic.getBBox() : {},\n                color: point.isNull ?\n                    Color.parse(colorProp.color).setOpacity(0).get() :\n                    colorProp.color,\n                lowerSeriesOptions: ddOptions,\n                pointOptions: oldSeries.options.data[pointIndex],\n                pointIndex: pointIndex,\n                oldExtremes: {\n                    xMin: xAxis && xAxis.userMin,\n                    xMax: xAxis && xAxis.userMax,\n                    yMin: yAxis && yAxis.userMin,\n                    yMax: yAxis && yAxis.userMax\n                },\n                resetZoomButton: last && last.levelNumber === levelNumber ?\n                    void 0 : this.resetZoomButton\n            }, colorProp);\n            // Push it to the lookup array\n            this.drilldownLevels.push(level);\n            // Reset names to prevent extending (#6704)\n            if (xAxis && xAxis.names) {\n                xAxis.names.length = 0;\n            }\n            newSeries = level.lowerSeries = this.addSeries(ddOptions, false);\n            newSeries.options._levelNumber = levelNumber + 1;\n            if (xAxis) {\n                xAxis.oldPos = xAxis.pos;\n                xAxis.userMin = xAxis.userMax = null;\n                yAxis.userMin = yAxis.userMax = null;\n            }\n            // Run fancy cross-animation on supported and equal types\n            if (oldSeries.type === newSeries.type) {\n                newSeries.animate = (newSeries.animateDrilldown || noop);\n                newSeries.options.animation = true;\n            }\n        };\n        Chart.prototype.applyDrilldown = function () {\n            var drilldownLevels = this.drilldownLevels,\n                levelToRemove;\n            if (drilldownLevels && drilldownLevels.length > 0) { // #3352, async loading\n                levelToRemove = drilldownLevels[drilldownLevels.length - 1].levelNumber;\n                this.drilldownLevels.forEach(function (level) {\n                    if (level.levelNumber === levelToRemove) {\n                        level.levelSeries.forEach(function (series) {\n                            // Not removed, not added as part of a multi-series\n                            // drilldown\n                            if (series.options &&\n                                series.options._levelNumber === levelToRemove) {\n                                series.remove(false);\n                            }\n                        });\n                    }\n                });\n            }\n            // We have a reset zoom button. Hide it and detatch it from the chart. It\n            // is preserved to the layer config above.\n            if (this.resetZoomButton) {\n                this.resetZoomButton.hide();\n                delete this.resetZoomButton;\n            }\n            this.pointer.reset();\n            fireEvent(this, 'afterDrilldown');\n            this.redraw();\n            fireEvent(this, 'afterApplyDrilldown');\n        };\n        /**\n         * This method creates an array of arrays containing a level number\n         * with the corresponding series/point.\n         *\n         * @requires  modules/breadcrumbs\n         *\n         * @private\n         * @param {Highcharts.Chart} chart\n         *        Highcharts Chart object.\n         * @return {Array<Breadcrumbs.BreadcrumbOptions>}\n         *        List for Highcharts Breadcrumbs.\n         */\n        var createBreadcrumbsList = function (chart) {\n                var list = [],\n            drilldownLevels = chart.drilldownLevels;\n            // The list is based on drilldown levels from the chart object\n            if (drilldownLevels && drilldownLevels.length) {\n                // Add the initial series as the first element.\n                if (!list[0]) {\n                    list.push({\n                        level: 0,\n                        levelOptions: drilldownLevels[0].seriesOptions\n                    });\n                }\n                drilldownLevels.forEach(function (level, i) {\n                    var lastBreadcrumb = list[list.length - 1];\n                    // If level is already added to breadcrumbs list,\n                    // don't add it again- drilling categories\n                    // + 1 because of the wrong levels numeration\n                    // in drilldownLevels array.\n                    if (level.levelNumber + 1 > lastBreadcrumb.level) {\n                        list.push({\n                            level: level.levelNumber + 1,\n                            levelOptions: merge({\n                                name: level.lowerSeries.name\n                            }, level.pointOptions)\n                        });\n                    }\n                });\n            }\n            return list;\n        };\n        /**\n         * When the chart is drilled down to a child series, calling `chart.drillUp()`\n         * will drill up to the parent series.\n         *\n         * @requires  modules/drilldown\n         *\n         * @function Highcharts.Chart#drillUp\n         *\n         * @sample {highcharts} highcharts/drilldown/programmatic\n         *         Programmatic drilldown\n         */\n        Chart.prototype.drillUp = function () {\n            if (!this.drilldownLevels || this.drilldownLevels.length === 0) {\n                return;\n            }\n            fireEvent(this, 'beforeDrillUp');\n            var chart = this,\n                drilldownLevels = chart.drilldownLevels,\n                levelNumber = drilldownLevels[drilldownLevels.length - 1].levelNumber,\n                i = drilldownLevels.length,\n                chartSeries = chart.series,\n                seriesI,\n                level,\n                oldSeries,\n                newSeries,\n                oldExtremes,\n                addSeries = function (seriesOptions) {\n                    var addedSeries;\n                chartSeries.forEach(function (series) {\n                    if (series.options._ddSeriesId === seriesOptions._ddSeriesId) {\n                        addedSeries = series;\n                    }\n                });\n                addedSeries = addedSeries || chart.addSeries(seriesOptions, false);\n                if (addedSeries.type === oldSeries.type &&\n                    addedSeries.animateDrillupTo) {\n                    addedSeries.animate = addedSeries.animateDrillupTo;\n                }\n                if (seriesOptions === level.seriesPurgedOptions) {\n                    newSeries = addedSeries;\n                }\n            };\n            var drilldownLevelsNumber = chart.drilldownLevels.length;\n            while (i--) {\n                level = drilldownLevels[i];\n                if (level.levelNumber === levelNumber) {\n                    drilldownLevels.pop();\n                    // Get the lower series by reference or id\n                    oldSeries = level.lowerSeries;\n                    if (!oldSeries.chart) { // #2786\n                        seriesI = chartSeries.length; // #2919\n                        while (seriesI--) {\n                            if (chartSeries[seriesI].options.id ===\n                                level.lowerSeriesOptions.id &&\n                                chartSeries[seriesI].options._levelNumber ===\n                                    levelNumber + 1) { // #3867\n                                oldSeries = chartSeries[seriesI];\n                                break;\n                            }\n                        }\n                    }\n                    oldSeries.xData = []; // Overcome problems with minRange (#2898)\n                    // Reset the names to start new series from the beginning.\n                    // Do it once to preserve names when multiple\n                    // series are added for the same axis, #16135.\n                    if (oldSeries.xAxis &&\n                        oldSeries.xAxis.names &&\n                        (drilldownLevelsNumber === 0 || i === drilldownLevelsNumber)) {\n                        oldSeries.xAxis.names.length = 0;\n                    }\n                    level.levelSeriesOptions.forEach(addSeries);\n                    fireEvent(chart, 'drillup', {\n                        seriesOptions: level.seriesPurgedOptions ||\n                            level.seriesOptions\n                    });\n                    if (newSeries.type === oldSeries.type) {\n                        newSeries.drilldownLevel = level;\n                        newSeries.options.animation =\n                            chart.options.drilldown.animation;\n                        if (oldSeries.animateDrillupFrom && oldSeries.chart) { // #2919\n                            oldSeries.animateDrillupFrom(level);\n                        }\n                    }\n                    newSeries.options._levelNumber = levelNumber;\n                    oldSeries.remove(false);\n                    // Reset the zoom level of the upper series\n                    if (newSeries.xAxis) {\n                        oldExtremes = level.oldExtremes;\n                        newSeries.xAxis.setExtremes(oldExtremes.xMin, oldExtremes.xMax, false);\n                        newSeries.yAxis.setExtremes(oldExtremes.yMin, oldExtremes.yMax, false);\n                    }\n                    // We have a resetZoomButton tucked away for this level. Attatch\n                    // it to the chart and show it.\n                    if (level.resetZoomButton) {\n                        chart.resetZoomButton = level.resetZoomButton;\n                    }\n                }\n            }\n            fireEvent(chart, 'afterDrillUp');\n            this.redraw();\n            if (this.ddDupes) {\n                this.ddDupes.length = 0; // #3315\n            } // #8324\n            // Fire a once-off event after all series have been drilled up (#5158)\n            fireEvent(chart, 'drillupall');\n        };\n        /**\n         * A function to fade in a group. First, the element is being hidden,\n         * then, using `opactiy`, is faded in. Used for example by `dataLabelsGroup`\n         * where simple SVGElement.fadeIn() is not enough, because of other features\n         * (e.g. InactiveState) using `opacity` to fadeIn/fadeOut.\n         * @requires module:modules/drilldown\n         *\n         * @private\n         * @param {undefined|SVGElement} [group]\n         * The SVG element to be faded in.\n         */\n        function fadeInGroup(group) {\n            var animationOptions = animObject(this.chart.options.drilldown.animation);\n            if (group) {\n                group.hide();\n                syncTimeout(function () {\n                    // Make sure neither the group, or the chart, were destroyed\n                    if (group && group.added) {\n                        group.fadeIn();\n                    }\n                }, Math.max(animationOptions.duration - 50, 0));\n            }\n        }\n        /* eslint-disable no-invalid-this */\n        // Add update function to be called internally from Chart.update\n        // (#7600, #12855)\n        addEvent(Chart, 'afterInit', function () {\n            var chart = this;\n            chart.drilldown = {\n                chart: chart,\n                fadeInGroup: fadeInGroup,\n                update: function (options, redraw) {\n                    merge(true, chart.options.drilldown, options);\n                    if (pick(redraw, true)) {\n                        chart.redraw();\n                    }\n                }\n            };\n        });\n        addEvent(Chart, 'render', function () {\n            (this.xAxis || []).forEach(function (axis) {\n                axis.ddPoints = {};\n                axis.series.forEach(function (series) {\n                    var i,\n                        xData = series.xData || [],\n                        points = series.points,\n                        p;\n                    for (i = 0; i < xData.length; i++) {\n                        p = series.options.data[i];\n                        // The `drilldown` property can only be set on an array or an\n                        // object\n                        if (typeof p !== 'number') {\n                            // Convert array to object (#8008)\n                            p = series.pointClass.prototype.optionsToObject\n                                .call({ series: series }, p);\n                            if (p.drilldown) {\n                                if (!axis.ddPoints[xData[i]]) {\n                                    axis.ddPoints[xData[i]] = [];\n                                }\n                                var index = i - (series.cropStart || 0);\n                                axis.ddPoints[xData[i]].push((points && index >= 0 && index < points.length) ?\n                                    points[index] :\n                                    true);\n                            }\n                        }\n                    }\n                });\n                // Add drillability to ticks, and always keep it drillability updated\n                // (#3951)\n                objectEach(axis.ticks, Tick.prototype.drillable);\n            });\n        });\n        addEvent(H.Breadcrumbs, 'up', function (e) {\n            var chart = this.chart,\n                drillUpsNumber = this.getLevel() - e.newLevel;\n            for (var i = 0; i < drillUpsNumber; i++) {\n                chart.drillUp();\n            }\n        });\n        addEvent(Chart, 'afterDrilldown', function () {\n            var chart = this,\n                drilldownOptions = chart.options.drilldown,\n                breadcrumbsOptions = drilldownOptions && drilldownOptions.breadcrumbs;\n            if (!chart.breadcrumbs) {\n                chart.breadcrumbs = new Breadcrumbs(chart, breadcrumbsOptions);\n            }\n            chart.breadcrumbs.updateProperties(createBreadcrumbsList(chart));\n        });\n        addEvent(Chart, 'afterDrillUp', function () {\n            var chart = this;\n            chart.breadcrumbs &&\n                chart.breadcrumbs.updateProperties(createBreadcrumbsList(chart));\n        });\n        addEvent(Chart, 'update', function (e) {\n            var breadcrumbs = this.breadcrumbs,\n                breadcrumbOptions = e.options.drilldown &&\n                    e.options.drilldown.breadcrumbs;\n            if (breadcrumbs && breadcrumbOptions) {\n                breadcrumbs.update(e.options.drilldown.breadcrumbs);\n            }\n        });\n        /**\n         * When drilling up, keep the upper series invisible until the lower series has\n         * moved into place.\n         *\n         * @private\n         * @function Highcharts.ColumnSeries#animateDrillupTo\n         * @param {boolean} [init=false]\n         * Whether to initialize animation\n         */\n        ColumnSeries.prototype.animateDrillupTo = function (init) {\n            if (!init) {\n                var newSeries_1 = this,\n                    level_1 = newSeries_1.drilldownLevel;\n                // First hide all items before animating in again\n                this.points.forEach(function (point) {\n                    var dataLabel = point.dataLabel;\n                    if (point.graphic) { // #3407\n                        point.graphic.hide();\n                    }\n                    if (dataLabel) {\n                        // The data label is initially hidden, make sure it is not faded\n                        // in (#6127)\n                        dataLabel.hidden = dataLabel.attr('visibility') === 'hidden';\n                        if (!dataLabel.hidden) {\n                            dataLabel.hide();\n                            if (point.connector) {\n                                point.connector.hide();\n                            }\n                        }\n                    }\n                });\n                // Do dummy animation on first point to get to complete\n                syncTimeout(function () {\n                    if (newSeries_1.points) { // May be destroyed in the meantime, #3389\n                        // Unable to drillup with nodes, #13711\n                        var pointsWithNodes_1 = [];\n                        newSeries_1.data.forEach(function (el) {\n                            pointsWithNodes_1.push(el);\n                        });\n                        if (newSeries_1.nodes) {\n                            pointsWithNodes_1 = pointsWithNodes_1.concat(newSeries_1.nodes);\n                        }\n                        pointsWithNodes_1.forEach(function (point, i) {\n                            // Fade in other points\n                            var verb = i === (level_1 && level_1.pointIndex) ? 'show' : 'fadeIn', inherit = verb === 'show' ? true : void 0, dataLabel = point.dataLabel;\n                            if (point.graphic) { // #3407\n                                point.graphic[verb](inherit);\n                            }\n                            if (dataLabel && !dataLabel.hidden) { // #6127\n                                dataLabel.fadeIn(); // #7384\n                                if (point.connector) {\n                                    point.connector.fadeIn();\n                                }\n                            }\n                        });\n                    }\n                }, Math.max(this.chart.options.drilldown.animation.duration - 50, 0));\n                // Reset to prototype\n                delete this.animate;\n            }\n        };\n        ColumnSeries.prototype.animateDrilldown = function (init) {\n            var series = this,\n                chart = this.chart,\n                drilldownLevels = chart.drilldownLevels,\n                animateFrom,\n                animationOptions = animObject(chart.options.drilldown.animation),\n                xAxis = this.xAxis,\n                styledMode = chart.styledMode;\n            if (!init) {\n                drilldownLevels.forEach(function (level) {\n                    if (series.options._ddSeriesId ===\n                        level.lowerSeriesOptions._ddSeriesId) {\n                        animateFrom = level.shapeArgs;\n                        if (!styledMode) {\n                            // Add the point colors to animate from\n                            animateFrom.fill = level.color;\n                        }\n                    }\n                });\n                animateFrom.x += pick(xAxis.oldPos, xAxis.pos) - xAxis.pos;\n                this.points.forEach(function (point) {\n                    var animateTo = point.shapeArgs;\n                    if (!styledMode) {\n                        // Add the point colors to animate to\n                        animateTo.fill = point.color;\n                    }\n                    if (point.graphic) {\n                        point.graphic\n                            .attr(animateFrom)\n                            .animate(extend(point.shapeArgs, { fill: point.color || series.color }), animationOptions);\n                    }\n                });\n                if (chart.drilldown) {\n                    chart.drilldown.fadeInGroup(this.dataLabelsGroup);\n                }\n                // Reset to prototype\n                delete this.animate;\n            }\n        };\n        /**\n         * When drilling up, pull out the individual point graphics from the lower\n         * series and animate them into the origin point in the upper series.\n         *\n         * @private\n         * @function Highcharts.ColumnSeries#animateDrillupFrom\n         * @param {Highcharts.DrilldownLevelObject} level\n         *        Level container\n         * @return {void}\n         */\n        ColumnSeries.prototype.animateDrillupFrom = function (level) {\n            var animationOptions = animObject(this.chart.options.drilldown.animation),\n                group = this.group, \n                // For 3d column series all columns are added to one group\n                // so we should not delete the whole group. #5297\n                removeGroup = group !== this.chart.columnGroup,\n                series = this;\n            // Cancel mouse events on the series group (#2787)\n            series.trackerGroups.forEach(function (key) {\n                if (series[key]) { // we don't always have dataLabelsGroup\n                    series[key].on('mouseover');\n                }\n            });\n            if (removeGroup) {\n                delete this.group;\n            }\n            this.points.forEach(function (point) {\n                var graphic = point.graphic,\n                    animateTo = level.shapeArgs,\n                    complete = function () {\n                        graphic.destroy();\n                    if (group && removeGroup) {\n                        group = group.destroy();\n                    }\n                };\n                if (graphic && animateTo) {\n                    delete point.graphic;\n                    if (!series.chart.styledMode) {\n                        animateTo.fill = level.color;\n                    }\n                    if (animationOptions.duration) {\n                        graphic.animate(animateTo, merge(animationOptions, { complete: complete }));\n                    }\n                    else {\n                        graphic.attr(animateTo);\n                        complete();\n                    }\n                }\n            });\n        };\n        if (PieSeries) {\n            extend(PieSeries.prototype, {\n                animateDrillupTo: ColumnSeries.prototype.animateDrillupTo,\n                animateDrillupFrom: ColumnSeries.prototype.animateDrillupFrom,\n                animateDrilldown: function (init) {\n                    var level = this.chart.drilldownLevels[this.chart.drilldownLevels.length - 1],\n                        animationOptions = this.chart.options.drilldown.animation;\n                    if (this.is('item')) {\n                        animationOptions.duration = 0;\n                    }\n                    // Unable to drill down in the horizontal item series #13372\n                    if (this.center) {\n                        var animateFrom_1 = level.shapeArgs,\n                            start_1 = animateFrom_1.start,\n                            angle = animateFrom_1.end - start_1,\n                            startAngle_1 = angle / this.points.length,\n                            styledMode_1 = this.chart.styledMode;\n                        if (!init) {\n                            this.points.forEach(function (point, i) {\n                                var animateTo = point.shapeArgs;\n                                if (!styledMode_1) {\n                                    animateFrom_1.fill = level.color;\n                                    animateTo.fill = point.color;\n                                }\n                                if (point.graphic) {\n                                    point.graphic\n                                        .attr(merge(animateFrom_1, {\n                                        start: start_1 + i * startAngle_1,\n                                        end: start_1 + (i + 1) * startAngle_1\n                                    }))[animationOptions ? 'animate' : 'attr'](animateTo, animationOptions);\n                                }\n                            });\n                            if (this.chart.drilldown) {\n                                this.chart.drilldown.fadeInGroup(this.dataLabelsGroup);\n                            }\n                            // Reset to prototype\n                            delete this.animate;\n                        }\n                    }\n                }\n            });\n        }\n        /**\n         * Perform drilldown on a point instance. The [drilldown](https://api.highcharts.com/highcharts/series.line.data.drilldown)\n         * property must be set on the point options.\n         *\n         * To drill down multiple points in the same category, use\n         * `Axis.drilldownCategory` instead.\n         *\n         * @requires  modules/drilldown\n         *\n         * @function Highcharts.Point#doDrilldown\n         *\n         * @sample {highcharts} highcharts/drilldown/programmatic\n         *         Programmatic drilldown\n         */\n        Point.prototype.doDrilldown = function () {\n            this.runDrilldown();\n        };\n        Point.prototype.runDrilldown = function (holdRedraw, category, originalEvent) {\n            var series = this.series,\n                chart = series.chart,\n                drilldown = chart.options.drilldown;\n            var i = (drilldown.series || []).length,\n                seriesOptions;\n            if (!chart.ddDupes) {\n                chart.ddDupes = [];\n            }\n            while (i-- && !seriesOptions) {\n                if (drilldown.series[i].id === this.drilldown &&\n                    chart.ddDupes.indexOf(this.drilldown) === -1) {\n                    seriesOptions = drilldown.series[i];\n                    chart.ddDupes.push(this.drilldown);\n                }\n            }\n            // Fire the event. If seriesOptions is undefined, the implementer can check\n            // for  seriesOptions, and call addSeriesAsDrilldown async if necessary.\n            fireEvent(chart, 'drilldown', {\n                point: this,\n                seriesOptions: seriesOptions,\n                category: category,\n                originalEvent: originalEvent,\n                points: (typeof category !== 'undefined' &&\n                    this.series.xAxis.getDDPoints(category).slice(0))\n            }, function (e) {\n                var chart = e.point.series && e.point.series.chart,\n                    seriesOptions = e.seriesOptions;\n                if (chart && seriesOptions) {\n                    if (holdRedraw) {\n                        chart.addSingleSeriesAsDrilldown(e.point, seriesOptions);\n                    }\n                    else {\n                        chart.addSeriesAsDrilldown(e.point, seriesOptions);\n                    }\n                }\n            });\n        };\n        /**\n         * Drill down to a given category. This is the same as clicking on an axis\n         * label. If multiple series with drilldown are present, all will drill down to\n         * the given category.\n         *\n         * See also `Point.doDrilldown` for drilling down on a single point instance.\n         *\n         * @function Highcharts.Axis#drilldownCategory\n         *\n         * @sample {highcharts} highcharts/drilldown/programmatic\n         *         Programmatic drilldown\n         *\n         * @param {number} x\n         *        The index of the category\n         * @param {global.MouseEvent} [originalEvent]\n         *        The original event, used internally.\n         */\n        Axis.prototype.drilldownCategory = function (x, originalEvent) {\n            this.getDDPoints(x).forEach(function (point) {\n                if (point &&\n                    point.series &&\n                    point.series.visible &&\n                    point.runDrilldown) { // #3197\n                    point.runDrilldown(true, x, originalEvent);\n                }\n            });\n            this.chart.applyDrilldown();\n        };\n        /**\n         * Return drillable points for this specific X value.\n         *\n         * @private\n         * @function Highcharts.Axis#getDDPoints\n         * @param {number} x\n         *        Tick position\n         * @return {Array<(false|Highcharts.Point)>}\n         *         Drillable points\n         */\n        Axis.prototype.getDDPoints = function (x) {\n            return (this.ddPoints && this.ddPoints[x] || []);\n        };\n        /**\n         * Make a tick label drillable, or remove drilling on update.\n         *\n         * @private\n         * @function Highcharts.Axis#drillable\n         */\n        Tick.prototype.drillable = function () {\n            var pos = this.pos,\n                label = this.label,\n                axis = this.axis,\n                isDrillable = axis.coll === 'xAxis' && axis.getDDPoints,\n                ddPointsX = isDrillable && axis.getDDPoints(pos),\n                styledMode = axis.chart.styledMode;\n            if (isDrillable) {\n                if (label && ddPointsX && ddPointsX.length) {\n                    label.drillable = true;\n                    if (!label.basicStyles && !styledMode) {\n                        label.basicStyles = merge(label.styles);\n                    }\n                    label.addClass('highcharts-drilldown-axis-label');\n                    // #12656 - avoid duplicate of attach event\n                    if (label.removeOnDrillableClick) {\n                        removeEvent(label.element, 'click');\n                    }\n                    label.removeOnDrillableClick = addEvent(label.element, 'click', function (e) {\n                        e.preventDefault();\n                        axis.drilldownCategory(pos, e);\n                    });\n                    if (!styledMode) {\n                        label.css(axis.chart.options.drilldown.activeAxisLabelStyle);\n                    }\n                }\n                else if (label && label.drillable && label.removeOnDrillableClick) {\n                    if (!styledMode) {\n                        label.styles = {}; // reset for full overwrite of styles\n                        label.element.removeAttribute('style'); // #17933\n                        label.css(label.basicStyles);\n                    }\n                    label.removeOnDrillableClick(); // #3806\n                    label.removeClass('highcharts-drilldown-axis-label');\n                }\n            }\n        };\n        // On initialization of each point, identify its label and make it clickable.\n        // Also, provide a list of points associated to that label.\n        addEvent(Point, 'afterInit', function () {\n            var point = this;\n            if (point.drilldown && !point.unbindDrilldownClick) {\n                // Add the click event to the point\n                point.unbindDrilldownClick = addEvent(point, 'click', handlePointClick);\n            }\n            return point;\n        });\n        addEvent(Point, 'update', function (e) {\n            var point = this,\n                options = e.options || {};\n            if (options.drilldown && !point.unbindDrilldownClick) {\n                // Add the click event to the point\n                point.unbindDrilldownClick = addEvent(point, 'click', handlePointClick);\n            }\n            else if (!options.drilldown &&\n                options.drilldown !== void 0 &&\n                point.unbindDrilldownClick) {\n                point.unbindDrilldownClick = point.unbindDrilldownClick();\n            }\n        });\n        var handlePointClick = function (e) {\n                var point = this,\n            series = point.series;\n            if (series.xAxis &&\n                series.chart.options.drilldown.allowPointDrilldown ===\n                    false) {\n                // #5822, x changed\n                series.xAxis.drilldownCategory(point.x, e);\n            }\n            else {\n                point.runDrilldown(void 0, void 0, e);\n            }\n        };\n        addEvent(Series, 'afterDrawDataLabels', function () {\n            var css = this.chart.options.drilldown.activeDataLabelStyle,\n                renderer = this.chart.renderer,\n                styledMode = this.chart.styledMode;\n            this.points.forEach(function (point) {\n                var dataLabelsOptions = point.options.dataLabels,\n                    pointCSS = pick(point.dlOptions,\n                    dataLabelsOptions && dataLabelsOptions.style, {});\n                if (point.drilldown && point.dataLabel) {\n                    if (css.color === 'contrast' && !styledMode) {\n                        pointCSS.color = renderer.getContrast(point.color || this.color);\n                    }\n                    if (dataLabelsOptions && dataLabelsOptions.color) {\n                        pointCSS.color = dataLabelsOptions.color;\n                    }\n                    point.dataLabel\n                        .addClass('highcharts-drilldown-data-label');\n                    if (!styledMode) {\n                        point.dataLabel\n                            .css(css)\n                            .css(pointCSS);\n                    }\n                }\n            }, this);\n        });\n        var applyCursorCSS = function (element,\n            cursor,\n            addClass,\n            styledMode) {\n                element[addClass ? 'addClass' : 'removeClass']('highcharts-drilldown-point');\n            if (!styledMode) {\n                element.css({ cursor: cursor });\n            }\n        };\n        // Mark the trackers with a pointer\n        addEvent(Series, 'afterDrawTracker', function () {\n            var styledMode = this.chart.styledMode;\n            this.points.forEach(function (point) {\n                if (point.drilldown && point.graphic) {\n                    applyCursorCSS(point.graphic, 'pointer', true, styledMode);\n                }\n            });\n        });\n        addEvent(Point, 'afterSetState', function () {\n            var styledMode = this.series.chart.styledMode;\n            if (this.drilldown && this.series.halo && this.state === 'hover') {\n                applyCursorCSS(this.series.halo, 'pointer', true, styledMode);\n            }\n            else if (this.series.halo) {\n                applyCursorCSS(this.series.halo, 'auto', false, styledMode);\n            }\n        });\n        addEvent(Chart, 'drillup', function () {\n            if (this.resetZoomButton) {\n                this.resetZoomButton = this.resetZoomButton.destroy();\n            }\n        });\n        addEvent(Chart, 'drillupall', function () {\n            if (this.resetZoomButton) {\n                this.showResetZoom();\n            }\n        });\n\n    });\n    _registerModule(_modules, 'masters/modules/drilldown.src.js', [], function () {\n\n\n    });\n}));"],
  "mappings": "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",
  "names": ["factory", "module", "exports", "define", "amd", "Highcharts", "undefined", "_registerModule", "obj", "path", "args", "fn", "hasOwnProperty", "apply", "CustomEvent", "window", "dispatchEvent", "detail", "_modules", "Chart", "D", "H", "U", "F", "format", "addEvent", "objectEach", "extend", "fireEvent", "merge", "pick", "defined", "isString", "defaultOptions", "lang", "mainBreadcrumb", "Breadcrumbs", "chart", "userOptions", "group", "list", "elementList", "isDirty", "level", "options", "chartOptions", "drilldown", "drillUpButton", "defaultBreadcrumbsOptions", "navigation", "breadcrumbs", "prototype", "updateProperties", "Breadcrumbs.prototype.updateProperties", "setList", "setLevel", "Breadcrumbs.prototype.setList", "Breadcrumbs.prototype.setLevel", "length", "getLevel", "Breadcrumbs.prototype.getLevel", "getButtonText", "Breadcrumbs.prototype.getButtonText", "breadcrumb", "breadcrumbsOptions", "textFormat", "showFullPath", "defaultText", "drillUpText", "returnText", "formatter", "levelOptions", "redraw", "Breadcrumbs.prototype.redraw", "render", "align", "Breadcrumbs.prototype.render", "renderer", "g", "addClass", "attr", "zIndex", "add", "renderFullPathButtons", "renderSingleButton", "alignBreadcrumbsGroup", "Breadcrumbs.prototype.renderFullPathButtons", "destroySingleButton", "resetElementListState", "updateListElements", "destroyListElements", "Breadcrumbs.prototype.renderSingleButton", "buttonSpacing", "posX", "getBBox", "width", "previousBreadcrumb", "renderButton", "updateSingleButton", "Breadcrumbs.prototype.alignBreadcrumbsGroup", "xOffset", "buttonTheme", "positionOptions", "position", "alignTo", "relativeTo", "bBox", "additionalSpace", "padding", "height", "newPositions", "x", "rtl", "y", "yOffset", "Breadcrumbs.prototype.renderButton", "posY", "button", "e", "buttonEvents", "events", "click", "callDefaultEvent", "call", "newLevel", "styledMode", "style", "renderSeparator", "Breadcrumbs.prototype.renderSeparator", "separatorOptions", "separator", "label", "text", "css", "update", "Breadcrumbs.prototype.update", "destroy", "Breadcrumbs.prototype.updateSingleButton", "currentBreadcrumb", "Breadcrumbs.prototype.destroy", "Breadcrumbs.prototype.destroyListElements", "force", "element", "updated", "Breadcrumbs.prototype.destroySingleButton", "Breadcrumbs.prototype.resetElementListState", "Breadcrumbs.prototype.updateListElements", "rtlFactor", "updateXPosition", "spacing", "forEach", "index", "isLast", "translate", "setState", "fill", "states", "select", "color", "floating", "verticalAlign", "useHTML", "breadcrumbsHeight", "marginBottom", "plotTop", "destroyEvents", "bbox", "resetZoomButton", "event", "resetSelection", "A", "Axis", "Color", "ColumnSeries", "Point", "Series", "SeriesRegistry", "SVGRenderer", "Tick", "fadeInGroup", "animationOptions", "animObject", "animation", "hide", "syncTimeout", "added", "fadeIn", "Math", "max", "duration", "noop", "removeEvent", "PieSeries", "seriesTypes", "pie", "ddSeriesId", "activeAxisLabelStyle", "cursor", "fontWeight", "textDecoration", "activeDataLabelStyle", "Element", "SVGRenderer.prototype.Element.prototype.fadeIn", "opacity", "visibility", "animate", "newOpacity", "addSeriesAsDrilldown", "Chart.prototype.addSeriesAsDrilldown", "point", "addSingleSeriesAsDrilldown", "applyDrilldown", "Chart.prototype.addSingleSeriesAsDrilldown", "ddOptions", "oldSeries", "series", "xAxis", "yAxis", "levelSeries", "levelSeriesOptions", "last", "colorProp", "colorIndex", "drilldownLevels", "levelNumber", "_levelNumber", "_ddSeriesId", "pointIndex", "points", "indexOf", "isDrilling", "_colorIndex", "push", "purgedOptions", "selected", "seriesOptions", "seriesPurgedOptions", "shapeArgs", "graphic", "isNull", "parse", "setOpacity", "get", "lowerSeriesOptions", "pointOptions", "data", "oldExtremes", "xMin", "userMin", "xMax", "userMax", "yMin", "yMax", "names", "newSeries", "lowerSeries", "addSeries", "oldPos", "pos", "type", "animateDrilldown", "Chart.prototype.applyDrilldown", "levelToRemove", "remove", "pointer", "reset", "createBreadcrumbsList", "i", "name", "drillUp", "Chart.prototype.drillUp", "chartSeries", "seriesI", "addedSeries", "animateDrillupTo", "drilldownLevelsNumber", "pop", "id", "xData", "drilldownLevel", "animateDrillupFrom", "setExtremes", "ddDupes", "axis", "ddPoints", "p", "pointClass", "optionsToObject", "cropStart", "ticks", "drillable", "drillUpsNumber", "drilldownOptions", "breadcrumbOptions", "ColumnSeries.prototype.animateDrillupTo", "init", "newSeries_1", "level_1", "dataLabel", "hidden", "connector", "pointsWithNodes_1", "el", "nodes", "concat", "verb", "inherit", "ColumnSeries.prototype.animateDrilldown", "animateFrom", "animateTo", "dataLabelsGroup", "ColumnSeries.prototype.animateDrillupFrom", "removeGroup", "columnGroup", "trackerGroups", "key", "on", "complete", "is", "center", "animateFrom_1", "start_1", "start", "startAngle_1", "end", "styledMode_1", "doDrilldown", "Point.prototype.doDrilldown", "runDrilldown", "Point.prototype.runDrilldown", "holdRedraw", "category", "originalEvent", "getDDPoints", "slice", "drilldownCategory", "Axis.prototype.drilldownCategory", "visible", "Axis.prototype.getDDPoints", "Tick.prototype.drillable", "isDrillable", "coll", "ddPointsX", "basicStyles", "styles", "removeOnDrillableClick", "preventDefault", "removeAttribute", "removeClass", "unbindDrilldownClick", "handlePointClick", "allowPointDrilldown", "dataLabelsOptions", "dataLabels", "pointCSS", "dlOptions", "getContrast", "applyCursorCSS", "halo", "state", "showResetZoom"]
}
