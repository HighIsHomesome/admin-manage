import {
  __commonJS
} from "./chunk-OL3AADLO.js";

// node_modules/highcharts/modules/drilldown.js
var require_drilldown = __commonJS({
  "node_modules/highcharts/modules/drilldown.js"(exports, module) {
    (function(a) {
      "object" === typeof module && module.exports ? (a["default"] = a, module.exports = a) : "function" === typeof define && define.amd ? define("highcharts/modules/drilldown", ["highcharts"], function(v) {
        a(v);
        a.Highcharts = v;
        return a;
      }) : a("undefined" !== typeof Highcharts ? Highcharts : void 0);
    })(function(a) {
      function v(a2, q, f, p) {
        a2.hasOwnProperty(q) || (a2[q] = p.apply(null, f), "function" === typeof CustomEvent && window.dispatchEvent(new CustomEvent("HighchartsModuleLoaded", { detail: { path: q, module: a2[q] } })));
      }
      a = a ? a._modules : {};
      v(
        a,
        "Extensions/Breadcrumbs.js",
        [a["Core/Chart/Chart.js"], a["Core/Defaults.js"], a["Core/Globals.js"], a["Core/Utilities.js"], a["Core/FormatUtilities.js"]],
        function(a2, q, f, p, l) {
          var v2 = l.format;
          l = p.addEvent;
          var C = p.objectEach, y = p.extend, D = p.fireEvent, w = p.merge, A = p.pick, E = p.defined, r = p.isString;
          y(q.defaultOptions.lang, { mainBreadcrumb: "Main" });
          q = function() {
            function a3(b, d) {
              this.group = void 0;
              this.list = [];
              this.elementList = {};
              this.isDirty = true;
              this.level = 0;
              this.options = void 0;
              d = w(
                b.options.drilldown && b.options.drilldown.drillUpButton,
                a3.defaultBreadcrumbsOptions,
                b.options.navigation && b.options.navigation.breadcrumbs,
                d
              );
              this.chart = b;
              this.options = d || {};
            }
            a3.prototype.updateProperties = function(b) {
              this.setList(b);
              this.setLevel();
              this.isDirty = true;
            };
            a3.prototype.setList = function(b) {
              this.list = b;
            };
            a3.prototype.setLevel = function() {
              this.level = this.list.length && this.list.length - 1;
            };
            a3.prototype.getLevel = function() {
              return this.level;
            };
            a3.prototype.getButtonText = function(b) {
              var a4 = this.chart, h = this.options, e = a4.options.lang, f2 = A(h.format, h.showFullPath ? "{level.name}" : "\u2190 {level.name}");
              e = e && A(e.drillUpText, e.mainBreadcrumb);
              b = h.formatter && h.formatter(b) || v2(f2, { level: b.levelOptions }, a4) || "";
              (r(b) && !b.length || "\u2190 " === b) && E(e) && (b = h.showFullPath ? e : "\u2190 " + e);
              return b;
            };
            a3.prototype.redraw = function() {
              this.isDirty && this.render();
              this.group && this.group.align();
              this.isDirty = false;
            };
            a3.prototype.render = function() {
              var a4 = this.chart, d = this.options;
              !this.group && d && (this.group = a4.renderer.g("breadcrumbs-group").addClass("highcharts-no-tooltip highcharts-breadcrumbs").attr({ zIndex: d.zIndex }).add());
              d.showFullPath ? this.renderFullPathButtons() : this.renderSingleButton();
              this.alignBreadcrumbsGroup();
            };
            a3.prototype.renderFullPathButtons = function() {
              this.destroySingleButton();
              this.resetElementListState();
              this.updateListElements();
              this.destroyListElements();
            };
            a3.prototype.renderSingleButton = function() {
              var a4 = this.chart, d = this.list, h = this.options.buttonSpacing;
              this.destroyListElements();
              var e = this.group ? this.group.getBBox().width : h;
              d = d[d.length - 2];
              !a4.drillUpButton && 0 < this.level ? a4.drillUpButton = this.renderButton(
                d,
                e,
                h
              ) : a4.drillUpButton && (0 < this.level ? this.updateSingleButton() : this.destroySingleButton());
            };
            a3.prototype.alignBreadcrumbsGroup = function(a4) {
              if (this.group) {
                var b = this.options, h = b.buttonTheme, e = b.position, f2 = "chart" === b.relativeTo || "spacingBox" === b.relativeTo ? void 0 : "scrollablePlotBox", k = this.group.getBBox();
                b = 2 * (h.padding || 0) + b.buttonSpacing;
                e.width = k.width + b;
                e.height = k.height + b;
                k = w(e);
                a4 && (k.x += a4);
                this.options.rtl && (k.x += e.width);
                k.y = A(k.y, this.yOffset, 0);
                this.group.align(k, true, f2);
              }
            };
            a3.prototype.renderButton = function(a4, d, h) {
              var b = this, f2 = this.chart, k = b.options, x = w(k.buttonTheme);
              d = f2.renderer.button(b.getButtonText(a4), d, h, function(d2) {
                var e = k.events && k.events.click, h2;
                e && (h2 = e.call(b, d2, a4));
                false !== h2 && (d2.newLevel = k.showFullPath ? a4.level : b.level - 1, D(b, "up", d2));
              }, x).addClass("highcharts-breadcrumbs-button").add(b.group);
              f2.styledMode || d.attr(k.style);
              return d;
            };
            a3.prototype.renderSeparator = function(a4, d) {
              var b = this.chart, e = this.options.separator;
              a4 = b.renderer.label(e.text, a4, d, void 0, void 0, void 0, false).addClass("highcharts-breadcrumbs-separator").add(this.group);
              b.styledMode || a4.css(e.style);
              return a4;
            };
            a3.prototype.update = function(a4) {
              w(true, this.options, a4);
              this.destroy();
              this.isDirty = true;
            };
            a3.prototype.updateSingleButton = function() {
              var a4 = this.chart, d = this.list[this.level - 1];
              a4.drillUpButton && a4.drillUpButton.attr({ text: this.getButtonText(d) });
            };
            a3.prototype.destroy = function() {
              this.destroySingleButton();
              this.destroyListElements(true);
              this.group && this.group.destroy();
              this.group = void 0;
            };
            a3.prototype.destroyListElements = function(a4) {
              var b = this.elementList;
              C(b, function(d, e) {
                if (a4 || !b[e].updated)
                  d = b[e], d.button && d.button.destroy(), d.separator && d.separator.destroy(), delete d.button, delete d.separator, delete b[e];
              });
              a4 && (this.elementList = {});
            };
            a3.prototype.destroySingleButton = function() {
              this.chart.drillUpButton && (this.chart.drillUpButton.destroy(), this.chart.drillUpButton = void 0);
            };
            a3.prototype.resetElementListState = function() {
              C(this.elementList, function(a4) {
                a4.updated = false;
              });
            };
            a3.prototype.updateListElements = function() {
              var a4 = this, d = a4.elementList, h = a4.options.buttonSpacing, e = a4.list, f2 = a4.options.rtl, k = f2 ? -1 : 1, x = function(a5, b) {
                return k * a5.getBBox().width + k * b;
              }, t = a4.group ? x(a4.group, h) : h, l2;
              e.forEach(function(b, q2) {
                q2 = q2 === e.length - 1;
                if (d[b.level]) {
                  l2 = d[b.level];
                  var p2 = l2.button;
                  if (l2.separator || q2)
                    l2.separator && q2 && (l2.separator.destroy(), delete l2.separator);
                  else {
                    t += k * h;
                    l2.separator = a4.renderSeparator(t, h);
                    if (f2) {
                      var r2 = l2.separator;
                      r2.translate(t - r2.getBBox().width, h);
                    }
                    t += x(l2.separator, h);
                  }
                  d[b.level].updated = true;
                } else
                  p2 = a4.renderButton(b, t, h), f2 && p2.translate(t - p2.getBBox().width, h), t += x(p2, h), q2 || (r2 = a4.renderSeparator(t, h), f2 && r2.translate(t - r2.getBBox().width, h), t += x(r2, h)), d[b.level] = { button: p2, separator: r2, updated: true };
                p2 && p2.setState(q2 ? 2 : 0);
              });
            };
            a3.defaultBreadcrumbsOptions = { buttonTheme: { fill: "none", height: 18, padding: 2, "stroke-width": 0, zIndex: 7, states: { select: { fill: "none" } }, style: { color: "#335cad" } }, buttonSpacing: 5, floating: false, format: void 0, relativeTo: "plotBox", rtl: false, position: { align: "left", verticalAlign: "top", x: 0, y: void 0 }, separator: { text: "/", style: { color: "#666666" } }, showFullPath: true, style: {}, useHTML: false, zIndex: 7 };
            return a3;
          }();
          f.Breadcrumbs || (f.Breadcrumbs = q, l(a2, "getMargins", function() {
            var a3 = this.breadcrumbs;
            if (a3 && !a3.options.floating && a3.level) {
              var b = a3.options, d = b.buttonTheme;
              d = (d.height || 0) + 2 * (d.padding || 0) + b.buttonSpacing;
              b = b.position.verticalAlign;
              "bottom" === b ? (this.marginBottom = (this.marginBottom || 0) + d, a3.yOffset = d) : "middle" !== b ? (this.plotTop += d, a3.yOffset = -d) : a3.yOffset = void 0;
            }
          }), l(a2, "redraw", function() {
            this.breadcrumbs && this.breadcrumbs.redraw();
          }), l(a2, "destroy", function() {
            this.breadcrumbs && (this.breadcrumbs.destroy(), this.breadcrumbs = void 0);
          }), l(a2, "afterShowResetZoom", function() {
            if (this.breadcrumbs) {
              var a3 = this.resetZoomButton && this.resetZoomButton.getBBox(), b = this.breadcrumbs.options;
              a3 && "right" === b.position.align && "plotBox" === b.relativeTo && this.breadcrumbs.alignBreadcrumbsGroup(-a3.width - b.buttonSpacing);
            }
          }), l(a2, "selection", function(a3) {
            true === a3.resetSelection && this.breadcrumbs && this.breadcrumbs.alignBreadcrumbsGroup();
          }));
          "";
          return q;
        }
      );
      v(a, "Extensions/Drilldown.js", [
        a["Core/Animation/AnimationUtilities.js"],
        a["Core/Axis/Axis.js"],
        a["Core/Chart/Chart.js"],
        a["Core/Color/Color.js"],
        a["Series/Column/ColumnSeries.js"],
        a["Core/Globals.js"],
        a["Core/Defaults.js"],
        a["Core/Series/Point.js"],
        a["Core/Series/Series.js"],
        a["Core/Series/SeriesRegistry.js"],
        a["Core/Renderer/SVG/SVGRenderer.js"],
        a["Core/Axis/Tick.js"],
        a["Core/Utilities.js"],
        a["Extensions/Breadcrumbs.js"]
      ], function(a2, q, f, p, l, v2, K, y, D, w, A, E, r, x) {
        function b(a3) {
          var g = d(this.chart.options.drilldown.animation);
          a3 && (a3.hide(), G(function() {
            a3 && a3.added && a3.fadeIn();
          }, Math.max(g.duration - 50, 0)));
        }
        var d = a2.animObject, h = v2.noop;
        a2 = K.defaultOptions;
        var e = r.addEvent, C = r.removeEvent, k = r.extend, z = r.fireEvent, t = r.merge, L = r.objectEach, B = r.pick, G = r.syncTimeout;
        w = w.seriesTypes.pie;
        var H = 1;
        k(a2.lang, {});
        a2.drilldown = { activeAxisLabelStyle: { cursor: "pointer", color: "#003399", fontWeight: "bold", textDecoration: "underline" }, activeDataLabelStyle: { cursor: "pointer", color: "#003399", fontWeight: "bold", textDecoration: "underline" }, animation: { duration: 500 }, drillUpButton: { position: { align: "right", x: -10, y: 10 } } };
        A.prototype.Element.prototype.fadeIn = function(a3) {
          this.attr({ opacity: 0.1, visibility: "inherit" }).animate({ opacity: B(this.newOpacity, 1) }, a3 || { duration: 250 });
        };
        f.prototype.addSeriesAsDrilldown = function(a3, c) {
          this.addSingleSeriesAsDrilldown(a3, c);
          this.applyDrilldown();
        };
        f.prototype.addSingleSeriesAsDrilldown = function(a3, c) {
          var g = a3.series, m = g.xAxis, b2 = g.yAxis, u = [], d2 = [], n;
          var e2 = this.styledMode ? { colorIndex: B(a3.colorIndex, g.colorIndex) } : { color: a3.color || g.color };
          this.drilldownLevels || (this.drilldownLevels = []);
          var f2 = g.options._levelNumber || 0;
          (n = this.drilldownLevels[this.drilldownLevels.length - 1]) && n.levelNumber !== f2 && (n = void 0);
          c = k(k({ _ddSeriesId: H++ }, e2), c);
          var l2 = g.points.indexOf(a3);
          g.chart.series.forEach(function(a4) {
            a4.xAxis !== m || a4.isDrilling || (a4.options._ddSeriesId = a4.options._ddSeriesId || H++, a4.options._colorIndex = a4.userOptions._colorIndex, a4.options._levelNumber = a4.options._levelNumber || f2, n ? (u = n.levelSeries, d2 = n.levelSeriesOptions) : (u.push(a4), a4.purgedOptions = t({ _ddSeriesId: a4.options._ddSeriesId, _levelNumber: a4.options._levelNumber, selected: a4.options.selected }, a4.userOptions), d2.push(a4.purgedOptions)));
          });
          a3 = k({ levelNumber: f2, seriesOptions: g.options, seriesPurgedOptions: g.purgedOptions, levelSeriesOptions: d2, levelSeries: u, shapeArgs: a3.shapeArgs, bBox: a3.graphic ? a3.graphic.getBBox() : {}, color: a3.isNull ? p.parse(e2.color).setOpacity(0).get() : e2.color, lowerSeriesOptions: c, pointOptions: g.options.data[l2], pointIndex: l2, oldExtremes: { xMin: m && m.userMin, xMax: m && m.userMax, yMin: b2 && b2.userMin, yMax: b2 && b2.userMax }, resetZoomButton: n && n.levelNumber === f2 ? void 0 : this.resetZoomButton }, e2);
          this.drilldownLevels.push(a3);
          m && m.names && (m.names.length = 0);
          c = a3.lowerSeries = this.addSeries(c, false);
          c.options._levelNumber = f2 + 1;
          m && (m.oldPos = m.pos, m.userMin = m.userMax = null, b2.userMin = b2.userMax = null);
          g.type === c.type && (c.animate = c.animateDrilldown || h, c.options.animation = true);
        };
        f.prototype.applyDrilldown = function() {
          var a3 = this.drilldownLevels;
          if (a3 && 0 < a3.length) {
            var c = a3[a3.length - 1].levelNumber;
            this.drilldownLevels.forEach(function(a4) {
              a4.levelNumber === c && a4.levelSeries.forEach(function(a5) {
                a5.options && a5.options._levelNumber === c && a5.remove(false);
              });
            });
          }
          this.resetZoomButton && (this.resetZoomButton.hide(), delete this.resetZoomButton);
          this.pointer.reset();
          z(this, "afterDrilldown");
          this.redraw();
          z(this, "afterApplyDrilldown");
        };
        var I = function(a3) {
          var c = [];
          (a3 = a3.drilldownLevels) && a3.length && (c[0] || c.push({ level: 0, levelOptions: a3[0].seriesOptions }), a3.forEach(function(a4, g) {
            a4.levelNumber + 1 > c[c.length - 1].level && c.push({ level: a4.levelNumber + 1, levelOptions: t({ name: a4.lowerSeries.name }, a4.pointOptions) });
          }));
          return c;
        };
        f.prototype.drillUp = function() {
          if (this.drilldownLevels && 0 !== this.drilldownLevels.length) {
            z(this, "beforeDrillUp");
            for (var a3 = this, c = a3.drilldownLevels, b2 = c[c.length - 1].levelNumber, m = c.length, d2 = a3.series, u, e2, n, f2, h2 = function(c2) {
              d2.forEach(function(a4) {
                a4.options._ddSeriesId === c2._ddSeriesId && (g = a4);
              });
              var g = g || a3.addSeries(c2, false);
              g.type === n.type && g.animateDrillupTo && (g.animate = g.animateDrillupTo);
              c2 === e2.seriesPurgedOptions && (f2 = g);
            }, k2 = a3.drilldownLevels.length; m--; )
              if (e2 = c[m], e2.levelNumber === b2) {
                c.pop();
                n = e2.lowerSeries;
                if (!n.chart) {
                  for (u = d2.length; u--; )
                    if (d2[u].options.id === e2.lowerSeriesOptions.id && d2[u].options._levelNumber === b2 + 1) {
                      n = d2[u];
                      break;
                    }
                }
                n.xData = [];
                n.xAxis && n.xAxis.names && (0 === k2 || m === k2) && (n.xAxis.names.length = 0);
                e2.levelSeriesOptions.forEach(h2);
                z(a3, "drillup", { seriesOptions: e2.seriesPurgedOptions || e2.seriesOptions });
                f2.type === n.type && (f2.drilldownLevel = e2, f2.options.animation = a3.options.drilldown.animation, n.animateDrillupFrom && n.chart && n.animateDrillupFrom(e2));
                f2.options._levelNumber = b2;
                n.remove(false);
                f2.xAxis && (u = e2.oldExtremes, f2.xAxis.setExtremes(u.xMin, u.xMax, false), f2.yAxis.setExtremes(u.yMin, u.yMax, false));
                e2.resetZoomButton && (a3.resetZoomButton = e2.resetZoomButton);
              }
            z(a3, "afterDrillUp");
            this.redraw();
            this.ddDupes && (this.ddDupes.length = 0);
            z(a3, "drillupall");
          }
        };
        e(f, "afterInit", function() {
          var a3 = this;
          a3.drilldown = { chart: a3, fadeInGroup: b, update: function(c, g) {
            t(true, a3.options.drilldown, c);
            B(g, true) && a3.redraw();
          } };
        });
        e(f, "render", function() {
          (this.xAxis || []).forEach(function(a3) {
            a3.ddPoints = {};
            a3.series.forEach(function(c) {
              var g, b2 = c.xData || [], e2 = c.points;
              for (g = 0; g < b2.length; g++) {
                var d2 = c.options.data[g];
                "number" !== typeof d2 && (d2 = c.pointClass.prototype.optionsToObject.call(
                  { series: c },
                  d2
                ), d2.drilldown && (a3.ddPoints[b2[g]] || (a3.ddPoints[b2[g]] = []), d2 = g - (c.cropStart || 0), a3.ddPoints[b2[g]].push(e2 && 0 <= d2 && d2 < e2.length ? e2[d2] : true)));
              }
            });
            L(a3.ticks, E.prototype.drillable);
          });
        });
        e(v2.Breadcrumbs, "up", function(a3) {
          var c = this.chart;
          a3 = this.getLevel() - a3.newLevel;
          for (var g = 0; g < a3; g++)
            c.drillUp();
        });
        e(f, "afterDrilldown", function() {
          var a3 = this.options.drilldown;
          a3 = a3 && a3.breadcrumbs;
          this.breadcrumbs || (this.breadcrumbs = new x(this, a3));
          this.breadcrumbs.updateProperties(I(this));
        });
        e(f, "afterDrillUp", function() {
          this.breadcrumbs && this.breadcrumbs.updateProperties(I(this));
        });
        e(f, "update", function(a3) {
          var c = this.breadcrumbs, b2 = a3.options.drilldown && a3.options.drilldown.breadcrumbs;
          c && b2 && c.update(a3.options.drilldown.breadcrumbs);
        });
        l.prototype.animateDrillupTo = function(a3) {
          if (!a3) {
            var c = this, b2 = c.drilldownLevel;
            this.points.forEach(function(a4) {
              var c2 = a4.dataLabel;
              a4.graphic && a4.graphic.hide();
              c2 && (c2.hidden = "hidden" === c2.attr("visibility"), c2.hidden || (c2.hide(), a4.connector && a4.connector.hide()));
            });
            G(function() {
              if (c.points) {
                var a4 = [];
                c.data.forEach(function(c2) {
                  a4.push(c2);
                });
                c.nodes && (a4 = a4.concat(c.nodes));
                a4.forEach(function(a5, c2) {
                  c2 = c2 === (b2 && b2.pointIndex) ? "show" : "fadeIn";
                  var g = "show" === c2 ? true : void 0, d2 = a5.dataLabel;
                  if (a5.graphic)
                    a5.graphic[c2](g);
                  d2 && !d2.hidden && (d2.fadeIn(), a5.connector && a5.connector.fadeIn());
                });
              }
            }, Math.max(this.chart.options.drilldown.animation.duration - 50, 0));
            delete this.animate;
          }
        };
        l.prototype.animateDrilldown = function(a3) {
          var c = this, b2 = this.chart, g = b2.drilldownLevels, e2, f2 = d(b2.options.drilldown.animation), h2 = this.xAxis, n = b2.styledMode;
          a3 || (g.forEach(function(a4) {
            c.options._ddSeriesId === a4.lowerSeriesOptions._ddSeriesId && (e2 = a4.shapeArgs, n || (e2.fill = a4.color));
          }), e2.x += B(h2.oldPos, h2.pos) - h2.pos, this.points.forEach(function(a4) {
            var b3 = a4.shapeArgs;
            n || (b3.fill = a4.color);
            a4.graphic && a4.graphic.attr(e2).animate(k(a4.shapeArgs, { fill: a4.color || c.color }), f2);
          }), b2.drilldown && b2.drilldown.fadeInGroup(this.dataLabelsGroup), delete this.animate);
        };
        l.prototype.animateDrillupFrom = function(a3) {
          var c = d(this.chart.options.drilldown.animation), b2 = this.group, e2 = b2 !== this.chart.columnGroup, g = this;
          g.trackerGroups.forEach(function(a4) {
            if (g[a4])
              g[a4].on("mouseover");
          });
          e2 && delete this.group;
          this.points.forEach(function(d2) {
            var f2 = d2.graphic, m = a3.shapeArgs, h2 = function() {
              f2.destroy();
              b2 && e2 && (b2 = b2.destroy());
            };
            f2 && m && (delete d2.graphic, g.chart.styledMode || (m.fill = a3.color), c.duration ? f2.animate(m, t(c, { complete: h2 })) : (f2.attr(m), h2()));
          });
        };
        w && k(w.prototype, { animateDrillupTo: l.prototype.animateDrillupTo, animateDrillupFrom: l.prototype.animateDrillupFrom, animateDrilldown: function(a3) {
          var c = this.chart.drilldownLevels[this.chart.drilldownLevels.length - 1], b2 = this.chart.options.drilldown.animation;
          this.is("item") && (b2.duration = 0);
          if (this.center) {
            var d2 = c.shapeArgs, e2 = d2.start, g = (d2.end - e2) / this.points.length, f2 = this.chart.styledMode;
            a3 || (this.points.forEach(function(a4, m) {
              var h2 = a4.shapeArgs;
              f2 || (d2.fill = c.color, h2.fill = a4.color);
              if (a4.graphic)
                a4.graphic.attr(t(d2, { start: e2 + m * g, end: e2 + (m + 1) * g }))[b2 ? "animate" : "attr"](h2, b2);
            }), this.chart.drilldown && this.chart.drilldown.fadeInGroup(this.dataLabelsGroup), delete this.animate);
          }
        } });
        y.prototype.doDrilldown = function() {
          this.runDrilldown();
        };
        y.prototype.runDrilldown = function(a3, c, b2) {
          var d2 = this.series.chart, e2 = d2.options.drilldown, g = (e2.series || []).length;
          d2.ddDupes || (d2.ddDupes = []);
          for (; g-- && !f2; )
            if (e2.series[g].id === this.drilldown && -1 === d2.ddDupes.indexOf(this.drilldown)) {
              var f2 = e2.series[g];
              d2.ddDupes.push(this.drilldown);
            }
          z(d2, "drilldown", { point: this, seriesOptions: f2, category: c, originalEvent: b2, points: "undefined" !== typeof c && this.series.xAxis.getDDPoints(c).slice(0) }, function(c2) {
            var b3 = c2.point.series && c2.point.series.chart, d3 = c2.seriesOptions;
            b3 && d3 && (a3 ? b3.addSingleSeriesAsDrilldown(
              c2.point,
              d3
            ) : b3.addSeriesAsDrilldown(c2.point, d3));
          });
        };
        q.prototype.drilldownCategory = function(a3, c) {
          this.getDDPoints(a3).forEach(function(b2) {
            b2 && b2.series && b2.series.visible && b2.runDrilldown && b2.runDrilldown(true, a3, c);
          });
          this.chart.applyDrilldown();
        };
        q.prototype.getDDPoints = function(a3) {
          return this.ddPoints && this.ddPoints[a3] || [];
        };
        E.prototype.drillable = function() {
          var a3 = this.pos, c = this.label, b2 = this.axis, d2 = "xAxis" === b2.coll && b2.getDDPoints, f2 = d2 && b2.getDDPoints(a3), h2 = b2.chart.styledMode;
          d2 && (c && f2 && f2.length ? (c.drillable = true, c.basicStyles || h2 || (c.basicStyles = t(c.styles)), c.addClass("highcharts-drilldown-axis-label"), c.removeOnDrillableClick && C(c.element, "click"), c.removeOnDrillableClick = e(c.element, "click", function(c2) {
            c2.preventDefault();
            b2.drilldownCategory(a3, c2);
          }), h2 || c.css(b2.chart.options.drilldown.activeAxisLabelStyle)) : c && c.drillable && c.removeOnDrillableClick && (h2 || (c.styles = {}, c.element.removeAttribute("style"), c.css(c.basicStyles)), c.removeOnDrillableClick(), c.removeClass("highcharts-drilldown-axis-label")));
        };
        e(y, "afterInit", function() {
          this.drilldown && !this.unbindDrilldownClick && (this.unbindDrilldownClick = e(this, "click", J));
          return this;
        });
        e(y, "update", function(a3) {
          a3 = a3.options || {};
          a3.drilldown && !this.unbindDrilldownClick ? this.unbindDrilldownClick = e(this, "click", J) : !a3.drilldown && void 0 !== a3.drilldown && this.unbindDrilldownClick && (this.unbindDrilldownClick = this.unbindDrilldownClick());
        });
        var J = function(a3) {
          var c = this.series;
          c.xAxis && false === c.chart.options.drilldown.allowPointDrilldown ? c.xAxis.drilldownCategory(this.x, a3) : this.runDrilldown(void 0, void 0, a3);
        };
        e(D, "afterDrawDataLabels", function() {
          var a3 = this.chart.options.drilldown.activeDataLabelStyle, c = this.chart.renderer, b2 = this.chart.styledMode;
          this.points.forEach(function(d2) {
            var e2 = d2.options.dataLabels, g = B(d2.dlOptions, e2 && e2.style, {});
            d2.drilldown && d2.dataLabel && ("contrast" !== a3.color || b2 || (g.color = c.getContrast(d2.color || this.color)), e2 && e2.color && (g.color = e2.color), d2.dataLabel.addClass("highcharts-drilldown-data-label"), b2 || d2.dataLabel.css(a3).css(g));
          }, this);
        });
        var F = function(a3, b2, d2, e2) {
          a3[d2 ? "addClass" : "removeClass"]("highcharts-drilldown-point");
          e2 || a3.css({ cursor: b2 });
        };
        e(D, "afterDrawTracker", function() {
          var a3 = this.chart.styledMode;
          this.points.forEach(function(b2) {
            b2.drilldown && b2.graphic && F(b2.graphic, "pointer", true, a3);
          });
        });
        e(y, "afterSetState", function() {
          var a3 = this.series.chart.styledMode;
          this.drilldown && this.series.halo && "hover" === this.state ? F(this.series.halo, "pointer", true, a3) : this.series.halo && F(this.series.halo, "auto", false, a3);
        });
        e(f, "drillup", function() {
          this.resetZoomButton && (this.resetZoomButton = this.resetZoomButton.destroy());
        });
        e(f, "drillupall", function() {
          this.resetZoomButton && this.showResetZoom();
        });
      });
      v(a, "masters/modules/drilldown.src.js", [], function() {
      });
    });
  }
});
export default require_drilldown();
//# sourceMappingURL=highcharts_modules_drilldown.js.map
